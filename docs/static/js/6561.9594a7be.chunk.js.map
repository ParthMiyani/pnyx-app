{"version":3,"file":"static/js/6561.9594a7be.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/wallets/dist/normalizeChainId-1fb9aedf.browser.esm.js","../node_modules/@thirdweb-dev/wallets/evm/connectors/local-wallet/dist/thirdweb-dev-wallets-evm-connectors-local-wallet.browser.esm.js"],"sourcesContent":["/**\n * @internal\n */\nfunction normalizeChainId(chainId) {\n  if (typeof chainId === \"string\") {\n    return Number.parseInt(chainId, chainId.trim().substring(0, 2) === \"0x\" ? 16 : 10);\n  }\n  if (typeof chainId === \"bigint\") {\n    return Number(chainId);\n  }\n  return chainId;\n}\n\nexport { normalizeChainId as n };\n","import { _ as _classPrivateFieldInitSpec, a as _classPrivateFieldSet, b as _classPrivateFieldGet } from '../../../../dist/classPrivateFieldSet-a5db7c83.browser.esm.js';\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-d7c057bf.browser.esm.js';\nimport { n as normalizeChainId } from '../../../../dist/normalizeChainId-1fb9aedf.browser.esm.js';\nimport { C as Connector } from '../../../../dist/connector-05689d68.browser.esm.js';\nimport { getDefaultGasOverrides, getChainProvider } from '@thirdweb-dev/sdk';\nimport { Signer } from 'ethers';\nimport { defineReadOnly } from 'ethers/lib/utils';\nimport 'eventemitter3';\n\nclass WrappedSigner extends Signer {\n  constructor(signer) {\n    super();\n    this.signer = signer;\n    defineReadOnly(this, \"provider\", signer.provider);\n  }\n  async getAddress() {\n    return await this.signer.getAddress();\n  }\n  async signMessage(message) {\n    return await this.signer.signMessage(message);\n  }\n  async signTransaction(transaction) {\n    return await this.signer.signTransaction(transaction);\n  }\n  connect(provider) {\n    return new WrappedSigner(this.signer.connect(provider));\n  }\n  _signTypedData(domain, types, value) {\n    return this.signer._signTypedData(domain, types, value);\n  }\n  async sendTransaction(transaction) {\n    if (!this.provider) {\n      throw new Error(\"Provider not found\");\n    }\n    const gas = await getDefaultGasOverrides(this.provider);\n    const txWithGas = {\n      ...gas,\n      ...transaction\n    };\n    return await this.signer.sendTransaction(txWithGas);\n  }\n}\n\nvar _provider = /*#__PURE__*/new WeakMap();\nvar _signer = /*#__PURE__*/new WeakMap();\nclass LocalWalletConnector extends Connector {\n  constructor(options) {\n    super();\n    _defineProperty(this, \"id\", \"local_wallet\");\n    _defineProperty(this, \"name\", \"Local Wallet\");\n    _classPrivateFieldInitSpec(this, _provider, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _signer, {\n      writable: true,\n      value: void 0\n    });\n    _defineProperty(this, \"shimDisconnectKey\", \"localWallet.shimDisconnect\");\n    _defineProperty(this, \"onChainChanged\", chainId => {\n      const id = normalizeChainId(chainId);\n      const unsupported = !this.options.chains.find(c => c.chainId === id);\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    this.options = options;\n  }\n  async connect(args) {\n    if (args.chainId) {\n      this.switchChain(args.chainId);\n    }\n    const signer = await this.getSigner();\n    const address = await signer.getAddress();\n    return address;\n  }\n  async disconnect() {\n    _classPrivateFieldSet(this, _provider, undefined);\n    _classPrivateFieldSet(this, _signer, undefined);\n  }\n  async getAddress() {\n    const signer = await this.getSigner();\n    if (!signer) {\n      throw new Error(\"No signer found\");\n    }\n    return await signer.getAddress();\n  }\n  async isConnected() {\n    try {\n      const addr = await this.getAddress();\n      return !!addr;\n    } catch {\n      return false;\n    }\n  }\n  async getProvider() {\n    if (!_classPrivateFieldGet(this, _provider)) {\n      _classPrivateFieldSet(this, _provider, getChainProvider(this.options.chain, {\n        clientId: this.options.clientId,\n        secretKey: this.options.secretKey\n      }));\n    }\n    return _classPrivateFieldGet(this, _provider);\n  }\n  async getSigner() {\n    if (!_classPrivateFieldGet(this, _signer)) {\n      const provider = await this.getProvider();\n      _classPrivateFieldSet(this, _signer, getSignerFromEthersWallet(this.options.ethersWallet, provider));\n    }\n    return _classPrivateFieldGet(this, _signer);\n  }\n  async switchChain(chainId) {\n    const chain = this.options.chains.find(c => c.chainId === chainId);\n    if (!chain) {\n      throw new Error(`Chain not found for chainId ${chainId}, please add it to the chains property when creating this wallet`);\n    }\n    _classPrivateFieldSet(this, _provider, getChainProvider(chain, {\n      clientId: this.options.clientId,\n      secretKey: this.options.secretKey\n    }));\n    _classPrivateFieldSet(this, _signer, getSignerFromEthersWallet(this.options.ethersWallet, _classPrivateFieldGet(this, _provider)));\n    this.onChainChanged(chainId);\n  }\n  async setupListeners() {}\n  updateChains(chains) {\n    this.options.chains = chains;\n  }\n}\nfunction getSignerFromEthersWallet(ethersWallet, provider) {\n  let signer = ethersWallet;\n  if (provider) {\n    signer = ethersWallet.connect(provider);\n  }\n  return new WrappedSigner(signer);\n}\n\nexport { LocalWalletConnector };\n"],"names":["normalizeChainId","chainId","Number","parseInt","trim","substring","WrappedSigner","Signer","constructor","signer","super","this","defineReadOnly","provider","getAddress","signMessage","message","signTransaction","transaction","connect","_signTypedData","domain","types","value","sendTransaction","Error","txWithGas","getDefaultGasOverrides","_provider","WeakMap","_signer","LocalWalletConnector","Connector","options","_defineProperty","_classPrivateFieldInitSpec","writable","id","unsupported","chains","find","c","emit","chain","args","switchChain","getSigner","disconnect","_classPrivateFieldSet","undefined","isConnected","getProvider","_classPrivateFieldGet","getChainProvider","clientId","secretKey","getSignerFromEthersWallet","ethersWallet","concat","onChainChanged","setupListeners","updateChains"],"sourceRoot":""}