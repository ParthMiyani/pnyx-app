{"version":3,"file":"static/js/950.9f3b3813.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/contract-platform-fee-9cd02358.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/contract-sales-a0170d05.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/edition-e71e4ca4.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/erc-1155-standard-5b6e8805.browser.esm.js"],"sourcesContent":["import { d as buildTransactionFunction, T as Transaction } from './transactions-d1b63e67.browser.esm.js';\nimport { dp as FEATURE_PLATFORM_FEE, bF as CommonPlatformFeeSchema } from './index-c67c8d87.browser.esm.js';\n\n/**\n * Handle platform fees and recipients\n * @remarks Configure platform fees for a contract, which can be applied on certain paid transactions\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const feeInfo = await contract.platformFees.get();\n * await contract.platformFees.set({\n *   platform_fee_basis_points: 100, // 1% fee\n *   platform_fee_recipient: \"0x...\" // the fee recipient\n * })\n * ```\n * @public\n */\nclass ContractPlatformFee {\n  featureName = FEATURE_PLATFORM_FEE.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the platform fee recipient and basis points\n   *\n   * @example\n   * ```javascript\n   * const feeInfo = await contract.platformFees.get();\n   * console.log(feeInfo.platform_fee_recipient);\n   * console.log(feeInfo.platform_fee_basis_points);\n   * ```\n   * @twfeature PlatformFee\n   */\n  async get() {\n    const [platformFeeRecipient, platformFeeBps] = await this.contractWrapper.read(\"getPlatformFeeInfo\", []);\n    return CommonPlatformFeeSchema.parseAsync({\n      platform_fee_recipient: platformFeeRecipient,\n      platform_fee_basis_points: platformFeeBps\n    });\n  }\n\n  /**\n   * Set the platform fee recipient and basis points\n   *\n   * @example\n   * ```javascript\n   * await contract.platformFees.set({\n   *   platform_fee_basis_points: 100, // 1% fee\n   *   platform_fee_recipient: \"0x...\" // the fee recipient\n   * })\n   * ```\n   *\n   * @param platformFeeInfo - the platform fee information\n   * @twfeature PlatformFee\n   */\n  set = /* @__PURE__ */buildTransactionFunction(async platformFeeInfo => {\n    const parsed = await CommonPlatformFeeSchema.parseAsync(platformFeeInfo);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setPlatformFeeInfo\",\n      args: [parsed.platform_fee_recipient, parsed.platform_fee_basis_points]\n    });\n  });\n}\n\nexport { ContractPlatformFee as C };\n","import { d as buildTransactionFunction, T as Transaction } from './transactions-d1b63e67.browser.esm.js';\nimport { d3 as FEATURE_PRIMARY_SALE } from './index-c67c8d87.browser.esm.js';\n\n/**\n * Handle primary sales recipients\n * @remarks Configure primary sale recipients for an entire contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const salesRecipient = await contract.sales.getRecipient();\n * await contract.sales.setRecipient(recipientWalletAddress);\n * ```\n * @public\n */\nclass ContractPrimarySale {\n  featureName = FEATURE_PRIMARY_SALE.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the primary sale recipient\n   * @returns The wallet address.\n   * @example\n   * ```javascript\n   * const salesRecipient = await contract.sales.getRecipient();\n   * ```\n   * @public\n   * @twfeature PrimarySale\n   */\n  async getRecipient() {\n    const result = await this.contractWrapper.read(\"primarySaleRecipient\", []);\n    return result;\n  }\n\n  /**\n   * Set the primary sale recipient\n   * @param recipient - the wallet address\n   * @example\n   * ```javascript\n   * await contract.sales.setRecipient(recipientWalletAddress);\n   * ```\n   * @public\n   * @twfeature PrimarySale\n   */\n  setRecipient = /* @__PURE__ */buildTransactionFunction(async recipient => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setPrimarySaleRecipient\",\n      args: [recipient]\n    });\n  });\n}\n\nexport { ContractPrimarySale as C };\n","import { constants } from 'ethers';\nimport { dA as NFT_BASE_CONTRACT_ROLES, cq as ContractWrapper, bj as AbiSchema, ch as TokenErc1155ContractSchema, H as getRoleHash } from './index-c67c8d87.browser.esm.js';\nimport { d as buildTransactionFunction, T as Transaction } from './transactions-d1b63e67.browser.esm.js';\nimport { C as ContractMetadata, b as ContractAppURI, G as GasCostEstimator, a as ContractEvents } from './contract-appuri-8a73f5ec.browser.esm.js';\nimport { C as ContractEncoder } from './fetchCurrencyValue-ca929de6.browser.esm.js';\nimport { C as ContractInterceptor } from './contract-interceptor-d7b164a7.browser.esm.js';\nimport { C as ContractRoyalty, a as ContractOwner } from './contract-owner-29132da9.browser.esm.js';\nimport { C as ContractPlatformFee } from './contract-platform-fee-9cd02358.browser.esm.js';\nimport { C as ContractRoles } from './contract-roles-80a71d71.browser.esm.js';\nimport { C as ContractPrimarySale } from './contract-sales-a0170d05.browser.esm.js';\nimport { a as Erc1155SignatureMintable } from './erc-1155-5d7d4bb3.browser.esm.js';\nimport { S as StandardErc1155 } from './erc-1155-standard-5b6e8805.browser.esm.js';\nimport 'zod';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/crypto';\nimport 'tiny-invariant';\nimport 'bn.js';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport 'eventemitter3';\nimport '@thirdweb-dev/storage';\nimport './setErc20Allowance-4ec0c078.browser.esm.js';\nimport './QueryParams-489c04ee.browser.esm.js';\nimport './signature-74888765.browser.esm.js';\nimport './normalizePriceValue-2bd5325b.browser.esm.js';\nimport '@thirdweb-dev/merkletree';\nimport './assertEnabled-51677c66.browser.esm.js';\nimport 'uuid';\nimport 'fast-deep-equal';\n\n/**\n * Create a collection of NFTs that lets you mint multiple copies of each NFT.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"edition\");\n * ```\n *\n * @internal\n * @deprecated use contract.erc1155 instead\n */\nclass Edition extends StandardErc1155 {\n  static contractRoles = NFT_BASE_CONTRACT_ROLES;\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * Signature Minting\n   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = AbiSchema.parse(abi || []);\n    this.metadata = new ContractMetadata(this.contractWrapper, TokenErc1155ContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Edition.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.signature = new Erc1155SignatureMintable(this.contractWrapper, this.storage, this.roles);\n    this.owner = new ContractOwner(this.contractWrapper);\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get all NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc1155.getAll(queryParams);\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async getOwned(walletAddress, queryParams) {\n    return this.erc1155.getOwned(walletAddress, queryParams);\n  }\n\n  /**\n   * Get the number of NFTs minted\n   * @returns The total number of NFTs minted in this contract\n   * @public\n   */\n  async getTotalCount() {\n    return this.erc1155.totalCount();\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.read(\"hasRole\", [getRoleHash(\"transfer\"), constants.AddressZero]);\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Mint NFT for the connected wallet\n   *\n   * @remarks See {@link Edition.mintTo}\n   */\n  mint = /* @__PURE__ */buildTransactionFunction(async metadataWithSupply => {\n    return this.erc1155.mint.prepare(metadataWithSupply);\n  });\n\n  /**\n   * Mint an NFT with a limited supply\n   *\n   * @remarks Mint an NFT with a limited supply to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }\n   *\n   * const metadataWithSupply = {\n   *   metadata,\n   *   supply: 1000, // The number of this NFT you want to mint\n   * }\n   *\n   * const tx = await contract.mintTo(toAddress, metadataWithSupply);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   */\n  mintTo = /* @__PURE__ */buildTransactionFunction(async (to, metadataWithSupply) => {\n    return this.erc1155.mintTo.prepare(to, metadataWithSupply);\n  });\n\n  /**\n   * Construct a mint transaction without executing it.\n   * This is useful for estimating the gas cost of a mint transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param receiver - Address you want to send the token to\n   * @param metadataWithSupply - The metadata of the NFT you want to mint\n   *\n   * @deprecated `contract.mint.prepare(...args)`\n   */\n  async getMintTransaction(receiver, metadataWithSupply) {\n    return this.erc1155.getMintTransaction(receiver, metadataWithSupply);\n  }\n\n  /**\n   * Increase the supply of an existing NFT and mint it to the connected wallet\n   *\n   * @param tokenId - the token id of the NFT to increase supply of\n   * @param additionalSupply - the additional amount to mint\n   */\n  mintAdditionalSupply = /* @__PURE__ */buildTransactionFunction(async (tokenId, additionalSupply) => {\n    return this.erc1155.mintAdditionalSupply.prepare(tokenId, additionalSupply);\n  });\n\n  /**\n   * Increase the supply of an existing NFT and mint it to a given wallet address\n   *\n   * @param to - the address to mint to\n   * @param tokenId - the token id of the NFT to increase supply of\n   * @param additionalSupply - the additional amount to mint\n   */\n  mintAdditionalSupplyTo = /* @__PURE__ */buildTransactionFunction(async (to, tokenId, additionalSupply) => {\n    return this.erc1155.mintAdditionalSupplyTo.prepare(to, tokenId, additionalSupply);\n  });\n\n  /**\n   * Mint Many NFTs for the connected wallet\n   *\n   * @remarks See {@link Edition.mintBatchTo}\n   */\n  mintBatch = /* @__PURE__ */buildTransactionFunction(async metadatas => {\n    return this.erc1155.mintBatch.prepare(metadatas);\n  });\n\n  /**\n   * Mint Many NFTs with limited supplies\n   *\n   * @remarks Mint many different NFTs with limited supplies to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata and supplies of your NFTs\n   * const metadataWithSupply = [{\n   *   supply: 50, // The number of this NFT you want to mint\n   *   metadata: {\n   *     name: \"Cool NFT #1\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }, {\n   *   supply: 100,\n   *   metadata: {\n   *     name: \"Cool NFT #2\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }];\n   *\n   * const tx = await contract.mintBatchTo(toAddress, metadataWithSupply);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   */\n  mintBatchTo = /* @__PURE__ */buildTransactionFunction(async (to, metadataWithSupply) => {\n    return this.erc1155.mintBatchTo.prepare(to, metadataWithSupply);\n  });\n\n  /**\n   * Burn a specified amount of a NFT\n   *\n   * @param tokenId - the token Id to burn\n   * @param amount - amount to burn\n   *\n   * @example\n   * ```javascript\n   * const result = await contract.burnTokens(tokenId, amount);\n   * ```\n   */\n  burn = /* @__PURE__ */buildTransactionFunction(async (tokenId, amount) => {\n    return this.erc1155.burn.prepare(tokenId, amount);\n  });\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { Edition };\n","import { d as buildTransactionFunction } from './transactions-d1b63e67.browser.esm.js';\nimport { E as Erc1155 } from './erc-1155-5d7d4bb3.browser.esm.js';\n\n/**\n * Standard ERC1155 NFT functions\n * @remarks Basic functionality for a ERC1155 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.edition.transfer(walletAddress, tokenId, quantity);\n * ```\n * @public\n */\nclass StandardErc1155 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc1155 = new Erc1155(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  ////// Standard ERC1155 functions //////\n\n  /**\n   * Get a single NFT\n   *\n   * @example\n   * ```javascript\n   * const nft = await contract.get(\"0\");\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  async get(tokenId) {\n    return this.erc1155.get(tokenId);\n  }\n\n  /**\n   * Returns the total supply of a specific token\n   * @param tokenId - The token ID to get the total supply of\n   * @returns The total supply\n   */\n  async totalSupply(tokenId) {\n    return this.erc1155.totalSupply(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check NFT balance\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0; // Id of the NFT to check\n   * const balance = await contract.balanceOf(walletAddress, tokenId);\n   * ```\n   */\n  async balanceOf(address, tokenId) {\n    return this.erc1155.balanceOf(address, tokenId);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  async balance(tokenId) {\n    return this.erc1155.balance(tokenId);\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return this.erc1155.isApproved(address, operator);\n  }\n\n  /**\n   * Transfer an NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFT to\n   * const toAddress = \"{{wallet_address}}\";\n   * const tokenId = \"0\"; // The token ID of the NFT you want to send\n   * const amount = 3; // How many copies of the NFTs to transfer\n   * await contract.transfer(toAddress, tokenId, amount);\n   * ```\n   */\n  transfer = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (to, tokenId, amount) {\n      let data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0];\n      return _this.erc1155.transfer.prepare(to, tokenId, amount, data);\n    };\n  })());\n\n  /**\n   * Transfer multiple NFTs\n   * \n   * @remarks Transfer multiple NFTs from the connected wallet to another wallet.\n   * \n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFTs to\n   * const toAddress = \"{{wallet_address}}\";\n   * // Array of token IDs of the NFTs you want to send\n   * const tokenIds = [\"0\", \"1\", \"2\"];\n   * // Array of amounts of the NFTs you want to send\n   * const amounts = [1, 2, 3];\n   * await contract.transferBatch(toAddress, tokenIds, amounts);\n   * ```\n   */\n  transferBatch = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this2 = this;\n    return async function (to, tokenIds, amounts, fromAddress) {\n      let data = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [0];\n      return _this2.erc1155.transferBatch.prepare(to, tokenIds, amounts, fromAddress, data);\n    };\n  })());\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  setApprovalForAll = /* @__PURE__ */buildTransactionFunction(async (operator, approved) => {\n    return this.erc1155.setApprovalForAll.prepare(operator, approved);\n  });\n\n  /**\n   * Airdrop multiple NFTs\n   *\n   * @remarks Airdrop one or multiple NFTs to the provided wallet addresses.\n   * @twfeature ERC1155\n   * @example\n   * ```javascript\n   * // The token ID of the NFT you want to airdrop\n   * const tokenId = \"0\";\n   * // Array of objects of addresses and quantities to airdrop NFTs to\n   * const addresses = [\n   *  {\n   *    address: \"0x...\",\n   *    quantity: 2,\n   *  },\n   *  {\n   *   address: \"0x...\",\n   *    quantity: 3,\n   *  },\n   * ];\n   * await contract.airdrop(tokenId, addresses);\n   *\n   * // You can also pass an array of addresses, it will airdrop 1 NFT per address\n   * const tokenId = \"0\";\n   * const addresses = [\n   *  \"0x...\", \"0x...\", \"0x...\",\n   * ]\n   * await contract.airdrop(tokenId, addresses);\n   * ```\n   */\n  airdrop = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this3 = this;\n    return async function (tokenId, addresses, fromAddress) {\n      let data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0];\n      return _this3.erc1155.airdrop.prepare(tokenId, addresses, fromAddress, data);\n    };\n  })());\n}\n\nexport { StandardErc1155 as S };\n"],"names":["ContractPlatformFee","constructor","contractWrapper","_defineProperty","FEATURE_PLATFORM_FEE","name","buildTransactionFunction","async","parsed","CommonPlatformFeeSchema","parseAsync","platformFeeInfo","Transaction","fromContractWrapper","this","method","args","platform_fee_recipient","platform_fee_basis_points","get","platformFeeRecipient","platformFeeBps","read","ContractPrimarySale","FEATURE_PRIMARY_SALE","recipient","getRecipient","Edition","StandardErc1155","network","address","storage","options","arguments","length","undefined","abi","chainId","super","ContractWrapper","erc1155","mint","prepare","metadataWithSupply","to","mintTo","tokenId","additionalSupply","mintAdditionalSupply","mintAdditionalSupplyTo","mintBatch","metadatas","mintBatchTo","amount","burn","AbiSchema","parse","metadata","ContractMetadata","TokenErc1155ContractSchema","app","ContractAppURI","roles","ContractRoles","contractRoles","royalties","ContractRoyalty","sales","encoder","ContractEncoder","estimator","GasCostEstimator","events","ContractEvents","platformFees","interceptor","ContractInterceptor","signature","Erc1155SignatureMintable","owner","ContractOwner","onNetworkUpdated","updateSignerOrProvider","getAddress","getAll","queryParams","getOwned","walletAddress","getTotalCount","totalCount","isTransferRestricted","getRoleHash","constants","getMintTransaction","receiver","overrides","call","functionName","NFT_BASE_CONTRACT_ROLES","_chainId","_this","data","transfer","_this2","tokenIds","amounts","fromAddress","transferBatch","operator","approved","setApprovalForAll","_this3","addresses","airdrop","Erc1155","totalSupply","balanceOf","balance","isApproved"],"sourceRoot":""}