{"version":3,"file":"static/js/6278.b138ef10.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/contract-interceptor-d7b164a7.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/contract-platform-fee-9cd02358.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/contract-sales-a0170d05.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/erc-721-standard-d1c2d576.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/nft-collection-2263b38f.browser.esm.js"],"sourcesContent":["/**\n * Allows overriding transaction behavior for this contract\n * @internal\n */\nclass ContractInterceptor {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * The next transaction executed will add/replace any overrides passed via the passed in hook.\n   * @remarks Overridden values will be applied to the next transaction executed.\n   * @example\n   * ```javascript\n   * contract.interceptor.overrideNextTransaction(() => ({\n   *   gasLimit: 3000000,\n   * }));\n   * ```\n   * @param hook - the hook to add or replace any CallOverrides (gas limit, gas price, nonce, from, value, etc...)\n   * @public\n   */\n  overrideNextTransaction(hook) {\n    this.contractWrapper.withTransactionOverride(hook);\n  }\n}\n\nexport { ContractInterceptor as C };\n","import { d as buildTransactionFunction, T as Transaction } from './transactions-d1b63e67.browser.esm.js';\nimport { dp as FEATURE_PLATFORM_FEE, bF as CommonPlatformFeeSchema } from './index-c67c8d87.browser.esm.js';\n\n/**\n * Handle platform fees and recipients\n * @remarks Configure platform fees for a contract, which can be applied on certain paid transactions\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const feeInfo = await contract.platformFees.get();\n * await contract.platformFees.set({\n *   platform_fee_basis_points: 100, // 1% fee\n *   platform_fee_recipient: \"0x...\" // the fee recipient\n * })\n * ```\n * @public\n */\nclass ContractPlatformFee {\n  featureName = FEATURE_PLATFORM_FEE.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the platform fee recipient and basis points\n   *\n   * @example\n   * ```javascript\n   * const feeInfo = await contract.platformFees.get();\n   * console.log(feeInfo.platform_fee_recipient);\n   * console.log(feeInfo.platform_fee_basis_points);\n   * ```\n   * @twfeature PlatformFee\n   */\n  async get() {\n    const [platformFeeRecipient, platformFeeBps] = await this.contractWrapper.read(\"getPlatformFeeInfo\", []);\n    return CommonPlatformFeeSchema.parseAsync({\n      platform_fee_recipient: platformFeeRecipient,\n      platform_fee_basis_points: platformFeeBps\n    });\n  }\n\n  /**\n   * Set the platform fee recipient and basis points\n   *\n   * @example\n   * ```javascript\n   * await contract.platformFees.set({\n   *   platform_fee_basis_points: 100, // 1% fee\n   *   platform_fee_recipient: \"0x...\" // the fee recipient\n   * })\n   * ```\n   *\n   * @param platformFeeInfo - the platform fee information\n   * @twfeature PlatformFee\n   */\n  set = /* @__PURE__ */buildTransactionFunction(async platformFeeInfo => {\n    const parsed = await CommonPlatformFeeSchema.parseAsync(platformFeeInfo);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setPlatformFeeInfo\",\n      args: [parsed.platform_fee_recipient, parsed.platform_fee_basis_points]\n    });\n  });\n}\n\nexport { ContractPlatformFee as C };\n","import { d as buildTransactionFunction, T as Transaction } from './transactions-d1b63e67.browser.esm.js';\nimport { d3 as FEATURE_PRIMARY_SALE } from './index-c67c8d87.browser.esm.js';\n\n/**\n * Handle primary sales recipients\n * @remarks Configure primary sale recipients for an entire contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const salesRecipient = await contract.sales.getRecipient();\n * await contract.sales.setRecipient(recipientWalletAddress);\n * ```\n * @public\n */\nclass ContractPrimarySale {\n  featureName = FEATURE_PRIMARY_SALE.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the primary sale recipient\n   * @returns The wallet address.\n   * @example\n   * ```javascript\n   * const salesRecipient = await contract.sales.getRecipient();\n   * ```\n   * @public\n   * @twfeature PrimarySale\n   */\n  async getRecipient() {\n    const result = await this.contractWrapper.read(\"primarySaleRecipient\", []);\n    return result;\n  }\n\n  /**\n   * Set the primary sale recipient\n   * @param recipient - the wallet address\n   * @example\n   * ```javascript\n   * await contract.sales.setRecipient(recipientWalletAddress);\n   * ```\n   * @public\n   * @twfeature PrimarySale\n   */\n  setRecipient = /* @__PURE__ */buildTransactionFunction(async recipient => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setPrimarySaleRecipient\",\n      args: [recipient]\n    });\n  });\n}\n\nexport { ContractPrimarySale as C };\n","import { aL as resolveAddress } from './index-c67c8d87.browser.esm.js';\nimport { d as buildTransactionFunction, T as Transaction } from './transactions-d1b63e67.browser.esm.js';\nimport { E as Erc721 } from './erc-721-b9f4c026.browser.esm.js';\n\n/**\n * Standard ERC721 NFT functions\n * @remarks Basic functionality for a ERC721 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.transfer(walletAddress, tokenId);\n * ```\n * @public\n */\nclass StandardErc721 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc721 = new Erc721(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /**\n   * Get all NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * console.log(nfts);\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc721.getAll(queryParams);\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * console.log(nfts);\n   * ```\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async getOwned(walletAddress, queryParams) {\n    if (walletAddress) {\n      walletAddress = await resolveAddress(walletAddress);\n    }\n    return this.erc721.getOwned(walletAddress, queryParams);\n  }\n\n  /**\n   * Get Owned Token Ids\n   * @remarks Get all the token ids of NFTs owned by a specific wallet (no metadata)\n   */\n  async getOwnedTokenIds(walletAddress) {\n    if (walletAddress) {\n      walletAddress = await resolveAddress(walletAddress);\n    }\n    return this.erc721.getOwnedTokenIds(walletAddress);\n  }\n\n  /**\n   * Get total minted supply count\n   */\n  async totalSupply() {\n    return this.erc721.totalCirculatingSupply();\n  }\n\n  /**\n   * Get a single NFT\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const nft = await contract.get(tokenId);\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  async get(tokenId) {\n    return this.erc721.get(tokenId);\n  }\n\n  /**\n   * Get the current owner of a given NFT within this Contract\n   *\n   * @param tokenId - the tokenId of the NFT\n   * @returns The address of the owner\n   */\n  async ownerOf(tokenId) {\n    return this.erc721.ownerOf(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.balanceOf(walletAddress);\n   * console.log(balance);\n   * ```\n   */\n  async balanceOf(address) {\n    return this.erc721.balanceOf(address);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  async balance() {\n    return this.erc721.balance();\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return this.erc721.isApproved(address, operator);\n  }\n\n  /**\n   * Transfer an NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0;\n   * await contract.transfer(walletAddress, tokenId);\n   * ```\n   */\n  transfer = /* @__PURE__ */buildTransactionFunction(async (to, tokenId) => {\n    return this.erc721.transfer.prepare(to, tokenId);\n  });\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  setApprovalForAll = /* @__PURE__ */buildTransactionFunction(async (operator, approved) => {\n    return this.erc721.setApprovalForAll.prepare(operator, approved);\n  });\n\n  /**\n   * Approve an operator for the NFT owner. Operators can call transferFrom or safeTransferFrom for the specified token.\n   * @param operator - the operator's address\n   * @param tokenId - the tokenId to give approval for\n   *\n   * @internal\n   */\n  setApprovalForToken = /* @__PURE__ */buildTransactionFunction(async (operator, tokenId) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"approve\",\n      args: [await resolveAddress(operator), tokenId]\n    });\n  });\n}\n\nexport { StandardErc721 as S };\n","import { constants } from 'ethers';\nimport { dA as NFT_BASE_CONTRACT_ROLES, cq as ContractWrapper, bj as AbiSchema, cd as TokenErc721ContractSchema, H as getRoleHash } from './index-c67c8d87.browser.esm.js';\nimport { d as buildTransactionFunction, T as Transaction } from './transactions-d1b63e67.browser.esm.js';\nimport { C as ContractMetadata, b as ContractAppURI, G as GasCostEstimator, a as ContractEvents } from './contract-appuri-8a73f5ec.browser.esm.js';\nimport { C as ContractEncoder } from './fetchCurrencyValue-ca929de6.browser.esm.js';\nimport { C as ContractInterceptor } from './contract-interceptor-d7b164a7.browser.esm.js';\nimport { C as ContractRoyalty, a as ContractOwner } from './contract-owner-29132da9.browser.esm.js';\nimport { C as ContractPlatformFee } from './contract-platform-fee-9cd02358.browser.esm.js';\nimport { C as ContractRoles } from './contract-roles-80a71d71.browser.esm.js';\nimport { C as ContractPrimarySale } from './contract-sales-a0170d05.browser.esm.js';\nimport { S as StandardErc721 } from './erc-721-standard-d1c2d576.browser.esm.js';\nimport { a as Erc721WithQuantitySignatureMintable } from './erc-721-b9f4c026.browser.esm.js';\nimport 'zod';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/crypto';\nimport 'tiny-invariant';\nimport 'bn.js';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport 'eventemitter3';\nimport '@thirdweb-dev/storage';\nimport './setErc20Allowance-4ec0c078.browser.esm.js';\nimport './QueryParams-489c04ee.browser.esm.js';\nimport './signature-74888765.browser.esm.js';\nimport './normalizePriceValue-2bd5325b.browser.esm.js';\nimport '@thirdweb-dev/merkletree';\nimport './assertEnabled-51677c66.browser.esm.js';\nimport 'uuid';\nimport './drop-claim-conditions-03410598.browser.esm.js';\nimport 'fast-deep-equal';\n\n/**\n * Create a collection of one-of-one NFTs.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"nft-collection\");\n * ```\n *\n * @internal\n * @deprecated use contract.erc721 instead\n */\nclass NFTCollection extends StandardErc721 {\n  static contractRoles = NFT_BASE_CONTRACT_ROLES;\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * Signature Minting\n   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature().generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   */\n\n  /**\n   * @internal\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = AbiSchema.parse(abi || []);\n    this.metadata = new ContractMetadata(this.contractWrapper, TokenErc721ContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, NFTCollection.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.signature = new Erc721WithQuantitySignatureMintable(this.contractWrapper, this.storage);\n    this.owner = new ContractOwner(this.contractWrapper);\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.read(\"hasRole\", [getRoleHash(\"transfer\"), constants.AddressZero]);\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Mint a unique NFT\n   *\n   * @remarks Mint a unique NFT to a  specified wallet.\n   *\n   * @example\n   * ```typescript\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const tx = await contract.mint(metadata);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   */\n  mint = /* @__PURE__ */buildTransactionFunction(async metadata => {\n    return this.erc721.mint.prepare(metadata);\n  });\n\n  /**\n   * Mint a unique NFT\n   *\n   * @remarks Mint a unique NFT to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const walletAddress = \"{{wallet_address}}\";\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const tx = await contract.mintTo(walletAddress, metadata);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   */\n  mintTo = /* @__PURE__ */buildTransactionFunction(async (walletAddress, metadata) => {\n    return this.erc721.mintTo.prepare(walletAddress, metadata);\n  });\n\n  /**\n   * Construct a mint transaction without executing it.\n   * This is useful for estimating the gas cost of a mint transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param receiver - Address you want to send the token to\n   * @param metadata - The metadata of the NFT you want to mint\n   *\n   * @deprecated Use `contract.mint.prepare(...args)` instead\n   */\n  async getMintTransaction(receiver, metadata) {\n    return this.erc721.getMintTransaction(receiver, metadata);\n  }\n\n  /**\n   * Mint Many unique NFTs\n   *\n   * @remarks Mint many unique NFTs at once to the connected wallet\n   *\n   * @example\n   * ```typescript\n   * // Custom metadata of the NFTs you want to mint.\n   * const metadatas = [{\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT #2\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/other/image.png\"),\n   * }];\n   *\n   * const tx = await contract.mintBatch(metadatas);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   */\n  mintBatch = /* @__PURE__ */buildTransactionFunction(async metadata => {\n    return this.erc721.mintBatch.prepare(metadata);\n  });\n\n  /**\n   * Mint Many unique NFTs\n   *\n   * @remarks Mint many unique NFTs at once to a specified wallet.\n   *\n   * @example\n   * ```typescript\n   * // Address of the wallet you want to mint the NFT to\n   * const walletAddress = \"{{wallet_address}}\";\n   *\n   * // Custom metadata of the NFTs you want to mint.\n   * const metadatas = [{\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT #2\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/other/image.png\"),\n   * }];\n   *\n   * const tx = await contract.mintBatchTo(walletAddress, metadatas);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   */\n  mintBatchTo = /* @__PURE__ */buildTransactionFunction(async (walletAddress, metadata) => {\n    return this.erc721.mintBatchTo.prepare(walletAddress, metadata);\n  });\n\n  /**\n   * Burn a single NFT\n   * @param tokenId - the token Id to burn\n   *\n   * @example\n   * ```javascript\n   * const result = await contract.burnToken(tokenId);\n   * ```\n   */\n  burn = /* @__PURE__ */buildTransactionFunction(tokenId => {\n    return this.erc721.burn.prepare(tokenId);\n  });\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { NFTCollection };\n"],"names":["ContractInterceptor","constructor","contractWrapper","this","overrideNextTransaction","hook","withTransactionOverride","ContractPlatformFee","_defineProperty","FEATURE_PLATFORM_FEE","name","buildTransactionFunction","async","parsed","CommonPlatformFeeSchema","parseAsync","platformFeeInfo","Transaction","fromContractWrapper","method","args","platform_fee_recipient","platform_fee_basis_points","get","platformFeeRecipient","platformFeeBps","read","ContractPrimarySale","FEATURE_PRIMARY_SALE","recipient","getRecipient","StandardErc721","chainId","_chainId","storage","to","tokenId","erc721","transfer","prepare","operator","approved","setApprovalForAll","resolveAddress","Erc721","onNetworkUpdated","network","updateSignerOrProvider","getAddress","address","getAll","queryParams","getOwned","walletAddress","getOwnedTokenIds","totalSupply","totalCirculatingSupply","ownerOf","balanceOf","balance","isApproved","NFTCollection","options","arguments","length","undefined","abi","super","ContractWrapper","mint","metadata","mintTo","mintBatch","mintBatchTo","burn","AbiSchema","parse","ContractMetadata","TokenErc721ContractSchema","app","ContractAppURI","roles","ContractRoles","contractRoles","royalties","ContractRoyalty","sales","encoder","ContractEncoder","estimator","GasCostEstimator","events","ContractEvents","platformFees","interceptor","signature","Erc721WithQuantitySignatureMintable","owner","ContractOwner","isTransferRestricted","getRoleHash","constants","getMintTransaction","receiver","overrides","call","functionName","NFT_BASE_CONTRACT_ROLES"],"sourceRoot":""}