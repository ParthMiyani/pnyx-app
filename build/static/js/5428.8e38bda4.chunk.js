"use strict";(self.webpackChunkclient=self.webpackChunkclient||[]).push([[5428],{15428:(t,e,n)=>{n.d(e,{OneKeyConnector:()=>r});var i=n(2600),s=n(38690),c=n(9677),o=n(66131),h=n(97419),a=n(24157);n(65892);class r extends o.InjectedConnector{constructor(t){const e={...{name:"OneKey Wallet",shimDisconnect:!0,shimChainChangedDisconnect:!0,getProvider:a.g},...t.options};super({chains:t.chains,options:e,connectorStorage:t.connectorStorage}),(0,i._)(this,"id",c.w.oneKey)}async connect(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};try{var e,n;const o=await this.getProvider();if(!o)throw new s.a;this.setupListeners(),this.emit("message",{type:"connecting"});let a=null;if(null!==(e=this.options)&&void 0!==e&&e.shimDisconnect&&!Boolean(this.connectorStorage.getItem(this.shimDisconnectKey))){a=await this.getAccount().catch((()=>null));if(!!a)try{await o.request({method:"wallet_requestPermissions",params:[{eth_accounts:{}}]})}catch(i){if(this.isUserRejectedRequestError(i))throw new s.U(i)}}if(!a){const t=await o.request({method:"eth_requestAccounts"});a=h.getAddress(t[0])}let r=await this.getChainId(),d=this.isChainUnsupported(r);if(t.chainId&&r!==t.chainId)try{await this.switchChain(t.chainId),r=t.chainId,d=this.isChainUnsupported(t.chainId)}catch(c){console.error("Could not switch to chain id : ".concat(t.chainId),c)}null!==(n=this.options)&&void 0!==n&&n.shimDisconnect&&await this.connectorStorage.setItem(this.shimDisconnectKey,"true");const u={chain:{id:r,unsupported:d},provider:o,account:a};return this.emit("connect",u),u}catch(i){if(this.isUserRejectedRequestError(i))throw new s.U(i);if(-32002===i.code)throw new s.R(i);throw i}}}}}]);
//# sourceMappingURL=5428.8e38bda4.chunk.js.map