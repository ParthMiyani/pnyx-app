{"version":3,"file":"static/js/8031.a7e2b842.chunk.js","mappings":"iGAGA,SAASA,EAAiBC,GACxB,MAAuB,kBAAZA,EACFC,OAAOC,SAASF,EAA4C,OAAnCA,EAAQG,OAAOC,UAAU,EAAG,GAAc,GAAK,IAE1D,kBAAZJ,EACFC,OAAOD,GAETA,CACT,C,2HCJIK,G,SAAyB,IAAIC,SAC7BC,EAAuB,IAAID,QAC/B,MAAME,UAAwBC,EAAAA,EAC5BC,WAAAA,CAAYC,GACVC,SACAC,EAAAA,EAAAA,GAA2BC,KAAMT,EAAW,CAC1CU,UAAU,EACVC,WAAO,KAETH,EAAAA,EAAAA,GAA2BC,KAAMP,EAAS,CACxCQ,UAAU,EACVC,WAAO,KAETC,EAAAA,EAAAA,GAAgBH,KAAM,kBAAkBd,IACtC,MAAMkB,GAAKnB,EAAAA,EAAAA,GAAiBC,GACtBmB,GAAeL,KAAKH,QAAQS,OAAOC,MAAKC,GAAKA,EAAEtB,UAAYkB,IACjEJ,KAAKS,KAAK,SAAU,CAClBC,MAAO,CACLN,KACAC,gBAEF,IAEJL,KAAKH,QAAUA,CACjB,CACA,aAAMc,CAAQC,GACRA,EAAK1B,SACPc,KAAKa,YAAYD,EAAK1B,SAExB,MAAM4B,QAAed,KAAKe,YAE1B,aADsBD,EAAOE,YAE/B,CACA,gBAAMC,IACJC,EAAAA,EAAAA,GAAsBlB,KAAMT,OAAW4B,IACvCD,EAAAA,EAAAA,GAAsBlB,KAAMP,OAAS0B,EACvC,CACA,gBAAMH,GACJ,MAAMF,QAAed,KAAKe,YAC1B,IAAKD,EACH,MAAM,IAAIM,MAAM,mBAElB,aAAaN,EAAOE,YACtB,CACA,iBAAMK,GACJ,IAEE,cADmBrB,KAAKgB,YAE1B,CAAE,MACA,OAAO,CACT,CACF,CACA,iBAAMM,GAOJ,OANKC,EAAAA,EAAAA,GAAsBvB,KAAMT,KAC/B2B,EAAAA,EAAAA,GAAsBlB,KAAMT,GAAWiC,EAAAA,EAAAA,IAAiBxB,KAAKH,QAAQa,MAAO,CAC1Ee,SAAUzB,KAAKH,QAAQ4B,SACvBC,UAAW1B,KAAKH,QAAQ6B,cAGrBH,EAAAA,EAAAA,GAAsBvB,KAAMT,EACrC,CACA,eAAMwB,GACJ,KAAKQ,EAAAA,EAAAA,GAAsBvB,KAAMP,GAAU,CACzC,MAAMkC,QAAiB3B,KAAKsB,eAC5BJ,EAAAA,EAAAA,GAAsBlB,KAAMP,EAASmC,EAAiB5B,KAAKH,QAAQiB,OAAQa,GAC7E,CACA,OAAOJ,EAAAA,EAAAA,GAAsBvB,KAAMP,EACrC,CACA,iBAAMoB,CAAY3B,GAChB,MAAMwB,EAAQV,KAAKH,QAAQS,OAAOC,MAAKC,GAAKA,EAAEtB,UAAYA,IAC1D,IAAKwB,EACH,MAAM,IAAIU,MAAM,+BAADS,OAAgC3C,EAAO,sEAExDgC,EAAAA,EAAAA,GAAsBlB,KAAMT,GAAWiC,EAAAA,EAAAA,IAAiBd,EAAO,CAC7De,SAAUzB,KAAKH,QAAQ4B,SACvBC,UAAW1B,KAAKH,QAAQ6B,cAE1BR,EAAAA,EAAAA,GAAsBlB,KAAMP,EAASmC,EAAiB5B,KAAKH,QAAQiB,QAAQS,EAAAA,EAAAA,GAAsBvB,KAAMT,KACvGS,KAAK8B,eAAe5C,EACtB,CACA,oBAAM6C,GAAkB,CACxBC,YAAAA,CAAa1B,GACXN,KAAKH,QAAQS,OAASA,CACxB,EAEF,SAASsB,EAAiBd,EAAQa,GAChC,OAAIA,EACKb,EAAOH,QAAQgB,GAEjBb,CACT,C","sources":["../node_modules/@thirdweb-dev/wallets/dist/normalizeChainId-1fb9aedf.browser.esm.js","../node_modules/@thirdweb-dev/wallets/evm/connectors/signer/dist/thirdweb-dev-wallets-evm-connectors-signer.browser.esm.js"],"sourcesContent":["/**\n * @internal\n */\nfunction normalizeChainId(chainId) {\n  if (typeof chainId === \"string\") {\n    return Number.parseInt(chainId, chainId.trim().substring(0, 2) === \"0x\" ? 16 : 10);\n  }\n  if (typeof chainId === \"bigint\") {\n    return Number(chainId);\n  }\n  return chainId;\n}\n\nexport { normalizeChainId as n };\n","import { _ as _defineProperty } from '../../../../dist/defineProperty-d7c057bf.browser.esm.js';\nimport { _ as _classPrivateFieldInitSpec, a as _classPrivateFieldSet, b as _classPrivateFieldGet } from '../../../../dist/classPrivateFieldSet-a5db7c83.browser.esm.js';\nimport { n as normalizeChainId } from '../../../../dist/normalizeChainId-1fb9aedf.browser.esm.js';\nimport { C as Connector } from '../../../../dist/connector-05689d68.browser.esm.js';\nimport { getChainProvider } from '@thirdweb-dev/sdk';\nimport 'eventemitter3';\n\nvar _provider = /*#__PURE__*/new WeakMap();\nvar _signer = /*#__PURE__*/new WeakMap();\nclass SignerConnector extends Connector {\n  constructor(options) {\n    super();\n    _classPrivateFieldInitSpec(this, _provider, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _signer, {\n      writable: true,\n      value: void 0\n    });\n    _defineProperty(this, \"onChainChanged\", chainId => {\n      const id = normalizeChainId(chainId);\n      const unsupported = !this.options.chains.find(c => c.chainId === id);\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    this.options = options;\n  }\n  async connect(args) {\n    if (args.chainId) {\n      this.switchChain(args.chainId);\n    }\n    const signer = await this.getSigner();\n    const address = await signer.getAddress();\n    return address;\n  }\n  async disconnect() {\n    _classPrivateFieldSet(this, _provider, undefined);\n    _classPrivateFieldSet(this, _signer, undefined);\n  }\n  async getAddress() {\n    const signer = await this.getSigner();\n    if (!signer) {\n      throw new Error(\"No signer found\");\n    }\n    return await signer.getAddress();\n  }\n  async isConnected() {\n    try {\n      const addr = await this.getAddress();\n      return !!addr;\n    } catch {\n      return false;\n    }\n  }\n  async getProvider() {\n    if (!_classPrivateFieldGet(this, _provider)) {\n      _classPrivateFieldSet(this, _provider, getChainProvider(this.options.chain, {\n        clientId: this.options.clientId,\n        secretKey: this.options.secretKey\n      }));\n    }\n    return _classPrivateFieldGet(this, _provider);\n  }\n  async getSigner() {\n    if (!_classPrivateFieldGet(this, _signer)) {\n      const provider = await this.getProvider();\n      _classPrivateFieldSet(this, _signer, getUpdatedSigner(this.options.signer, provider));\n    }\n    return _classPrivateFieldGet(this, _signer);\n  }\n  async switchChain(chainId) {\n    const chain = this.options.chains.find(c => c.chainId === chainId);\n    if (!chain) {\n      throw new Error(`Chain not found for chainId ${chainId}, please add it to the chains property when creating this wallet`);\n    }\n    _classPrivateFieldSet(this, _provider, getChainProvider(chain, {\n      clientId: this.options.clientId,\n      secretKey: this.options.secretKey\n    }));\n    _classPrivateFieldSet(this, _signer, getUpdatedSigner(this.options.signer, _classPrivateFieldGet(this, _provider)));\n    this.onChainChanged(chainId);\n  }\n  async setupListeners() {}\n  updateChains(chains) {\n    this.options.chains = chains;\n  }\n}\nfunction getUpdatedSigner(signer, provider) {\n  if (provider) {\n    return signer.connect(provider);\n  }\n  return signer;\n}\n\nexport { SignerConnector };\n"],"names":["normalizeChainId","chainId","Number","parseInt","trim","substring","_provider","WeakMap","_signer","SignerConnector","Connector","constructor","options","super","_classPrivateFieldInitSpec","this","writable","value","_defineProperty","id","unsupported","chains","find","c","emit","chain","connect","args","switchChain","signer","getSigner","getAddress","disconnect","_classPrivateFieldSet","undefined","Error","isConnected","getProvider","_classPrivateFieldGet","getChainProvider","clientId","secretKey","provider","getUpdatedSigner","concat","onChainChanged","setupListeners","updateChains"],"sourceRoot":""}