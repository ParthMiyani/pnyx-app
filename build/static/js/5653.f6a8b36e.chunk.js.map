{"version":3,"file":"static/js/5653.f6a8b36e.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/erc-721-standard-d1c2d576.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/hasERC20Allowance-97a16e86.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/marketplace-643179e0.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/multiwrap-c11ba39c.browser.esm.js"],"sourcesContent":["import { aL as resolveAddress } from './index-c67c8d87.browser.esm.js';\nimport { d as buildTransactionFunction, T as Transaction } from './transactions-d1b63e67.browser.esm.js';\nimport { E as Erc721 } from './erc-721-b9f4c026.browser.esm.js';\n\n/**\n * Standard ERC721 NFT functions\n * @remarks Basic functionality for a ERC721 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.transfer(walletAddress, tokenId);\n * ```\n * @public\n */\nclass StandardErc721 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc721 = new Erc721(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /**\n   * Get all NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * console.log(nfts);\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc721.getAll(queryParams);\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * console.log(nfts);\n   * ```\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async getOwned(walletAddress, queryParams) {\n    if (walletAddress) {\n      walletAddress = await resolveAddress(walletAddress);\n    }\n    return this.erc721.getOwned(walletAddress, queryParams);\n  }\n\n  /**\n   * Get Owned Token Ids\n   * @remarks Get all the token ids of NFTs owned by a specific wallet (no metadata)\n   */\n  async getOwnedTokenIds(walletAddress) {\n    if (walletAddress) {\n      walletAddress = await resolveAddress(walletAddress);\n    }\n    return this.erc721.getOwnedTokenIds(walletAddress);\n  }\n\n  /**\n   * Get total minted supply count\n   */\n  async totalSupply() {\n    return this.erc721.totalCirculatingSupply();\n  }\n\n  /**\n   * Get a single NFT\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const nft = await contract.get(tokenId);\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  async get(tokenId) {\n    return this.erc721.get(tokenId);\n  }\n\n  /**\n   * Get the current owner of a given NFT within this Contract\n   *\n   * @param tokenId - the tokenId of the NFT\n   * @returns The address of the owner\n   */\n  async ownerOf(tokenId) {\n    return this.erc721.ownerOf(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.balanceOf(walletAddress);\n   * console.log(balance);\n   * ```\n   */\n  async balanceOf(address) {\n    return this.erc721.balanceOf(address);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  async balance() {\n    return this.erc721.balance();\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return this.erc721.isApproved(address, operator);\n  }\n\n  /**\n   * Transfer an NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0;\n   * await contract.transfer(walletAddress, tokenId);\n   * ```\n   */\n  transfer = /* @__PURE__ */buildTransactionFunction(async (to, tokenId) => {\n    return this.erc721.transfer.prepare(to, tokenId);\n  });\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  setApprovalForAll = /* @__PURE__ */buildTransactionFunction(async (operator, approved) => {\n    return this.erc721.setApprovalForAll.prepare(operator, approved);\n  });\n\n  /**\n   * Approve an operator for the NFT owner. Operators can call transferFrom or safeTransferFrom for the specified token.\n   * @param operator - the operator's address\n   * @param tokenId - the tokenId to give approval for\n   *\n   * @internal\n   */\n  setApprovalForToken = /* @__PURE__ */buildTransactionFunction(async (operator, tokenId) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"approve\",\n      args: [await resolveAddress(operator), tokenId]\n    });\n  });\n}\n\nexport { StandardErc721 as S };\n","import { cq as ContractWrapper } from './index-c67c8d87.browser.esm.js';\n\n/**\n * @internal\n */\nasync function hasERC20Allowance(contractToApprove, currencyAddress, value) {\n  const provider = contractToApprove.getProvider();\n  const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n  const erc20 = new ContractWrapper(provider, currencyAddress, ERC20Abi, {}, contractToApprove.storage);\n  const owner = await contractToApprove.getSignerAddress();\n  const spender = contractToApprove.address;\n  const allowance = await erc20.read(\"allowance\", [owner, spender]);\n  return allowance.gte(value);\n}\n\nexport { hasERC20Allowance as h };\n","import { Contract, BigNumber } from 'ethers';\nimport invariant from 'tiny-invariant';\nimport { I as InterfaceId_IERC721, a as InterfaceId_IERC1155, D as DEFAULT_QUERY_ALL_COUNT } from './QueryParams-489c04ee.browser.esm.js';\nimport { cq as ContractWrapper, dz as MAX_BPS } from './index-c67c8d87.browser.esm.js';\nimport { a as fetchCurrencyValue } from './fetchCurrencyValue-ca929de6.browser.esm.js';\n\n/**\n * This method checks if the given token is approved for the transferrerContractAddress contract.\n * This is particularly useful for contracts that need to transfer NFTs on the users' behalf\n *\n * @internal\n * @param provider - The connected provider\n * @param transferrerContractAddress - The address of the marketplace contract\n * @param assetContract - The address of the asset contract.\n * @param tokenId - The token id of the token.\n * @param owner - The address of the account that owns the token.\n * @returns  True if the transferrerContractAddress is approved on the token, false otherwise.\n */\nasync function isTokenApprovedForTransfer(provider, transferrerContractAddress, assetContract, tokenId, owner) {\n  try {\n    const ERC165Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC165.json')).default;\n    const erc165 = new Contract(assetContract, ERC165Abi, provider);\n    const [isERC721, isERC1155] = await Promise.all([erc165.supportsInterface(InterfaceId_IERC721), erc165.supportsInterface(InterfaceId_IERC1155)]);\n    if (isERC721) {\n      const ERC721Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC721.json')).default;\n      const asset = new Contract(assetContract, ERC721Abi, provider);\n      const approved = await asset.isApprovedForAll(owner, transferrerContractAddress);\n      if (approved) {\n        return true;\n      }\n\n      // Handle reverts in case of non-existent tokens\n      let approvedAddress;\n      try {\n        approvedAddress = await asset.getApproved(tokenId);\n      } catch (e) {}\n      return approvedAddress?.toLowerCase() === transferrerContractAddress.toLowerCase();\n    } else if (isERC1155) {\n      const ERC1155Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC1155.json')).default;\n      const asset = new Contract(assetContract, ERC1155Abi, provider);\n      return await asset.isApprovedForAll(owner, transferrerContractAddress);\n    } else {\n      console.error(\"Contract does not implement ERC 1155 or ERC 721.\");\n      return false;\n    }\n  } catch (err) {\n    console.error(\"Failed to check if token is approved\", err);\n    return false;\n  }\n}\n\n/**\n * Checks if the marketplace is approved to make transfers on the assetContract\n * If not, it tries to set the approval.\n * @param contractWrapper - The contract wrapper to use\n * @param marketplaceAddress - The address of the marketplace contract\n * @param assetContract - The address of the asset contract.\n * @param tokenId - The token id of the token.\n * @param from - The address of the account that owns the token.\n */\nasync function handleTokenApproval(contractWrapper, marketplaceAddress, assetContract, tokenId, from) {\n  const ERC165Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC165.json')).default;\n  const erc165 = new ContractWrapper(contractWrapper.getSignerOrProvider(), assetContract, ERC165Abi, contractWrapper.options, contractWrapper.storage);\n  const [isERC721, isERC1155] = await Promise.all([erc165.read(\"supportsInterface\", [InterfaceId_IERC721]), erc165.read(\"supportsInterface\", [InterfaceId_IERC1155])]);\n  // check for token approval\n  if (isERC721) {\n    const ERC721Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC721.json')).default;\n    const asset = new ContractWrapper(contractWrapper.getSignerOrProvider(), assetContract, ERC721Abi, contractWrapper.options, contractWrapper.storage);\n    const approved = await asset.read(\"isApprovedForAll\", [from, marketplaceAddress]);\n    if (!approved) {\n      const isTokenApproved = (await asset.read(\"getApproved\", [tokenId])).toLowerCase() === marketplaceAddress.toLowerCase();\n      if (!isTokenApproved) {\n        await asset.sendTransaction(\"setApprovalForAll\", [marketplaceAddress, true]);\n      }\n    }\n  } else if (isERC1155) {\n    const ERC1155Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC1155.json')).default;\n    const asset = new ContractWrapper(contractWrapper.getSignerOrProvider(), assetContract, ERC1155Abi, contractWrapper.options, contractWrapper.storage);\n    const approved = await asset.read(\"isApprovedForAll\", [from, marketplaceAddress]);\n    if (!approved) {\n      await asset.sendTransaction(\"setApprovalForAll\", [marketplaceAddress, true]);\n    }\n  } else {\n    throw Error(\"Contract must implement ERC 1155 or ERC 721.\");\n  }\n}\n\n/**\n * Used to verify fields in new listing.\n * @internal\n */\n// TODO this should be done in zod\nfunction validateNewListingParam(param) {\n  invariant(param.assetContractAddress !== undefined && param.assetContractAddress !== null, \"Asset contract address is required\");\n  invariant(param.buyoutPricePerToken !== undefined && param.buyoutPricePerToken !== null, \"Buyout price is required\");\n  invariant(param.listingDurationInSeconds !== undefined && param.listingDurationInSeconds !== null, \"Listing duration is required\");\n  invariant(param.startTimestamp !== undefined && param.startTimestamp !== null, \"Start time is required\");\n  invariant(param.tokenId !== undefined && param.tokenId !== null, \"Token ID is required\");\n  invariant(param.quantity !== undefined && param.quantity !== null, \"Quantity is required\");\n  switch (param.type) {\n    case \"NewAuctionListing\":\n      {\n        invariant(param.reservePricePerToken !== undefined && param.reservePricePerToken !== null, \"Reserve price is required\");\n      }\n  }\n}\n\n/**\n * Maps a contract offer to the strict interface\n *\n * @internal\n * @param offer - The offer to map\n * @returns  An `Offer` object\n */\nasync function mapOffer(provider, listingId, offer) {\n  return {\n    quantity: offer.quantityDesired,\n    pricePerToken: offer.pricePerToken,\n    currencyContractAddress: offer.currency,\n    buyerAddress: offer.offeror,\n    quantityDesired: offer.quantityWanted,\n    currencyValue: await fetchCurrencyValue(provider, offer.currency, offer.quantityWanted.mul(offer.pricePerToken)),\n    listingId\n  };\n}\nfunction isWinningBid(winningPrice, newBidPrice, bidBuffer) {\n  bidBuffer = BigNumber.from(bidBuffer);\n  winningPrice = BigNumber.from(winningPrice);\n  newBidPrice = BigNumber.from(newBidPrice);\n  if (winningPrice.eq(BigNumber.from(0))) {\n    return false;\n  }\n  const buffer = newBidPrice.sub(winningPrice).mul(MAX_BPS).div(winningPrice);\n  return buffer.gte(bidBuffer);\n}\nasync function getAllInBatches(start, end, fn) {\n  const batches = [];\n  while (end - start > DEFAULT_QUERY_ALL_COUNT) {\n    batches.push(fn(start, start + DEFAULT_QUERY_ALL_COUNT - 1));\n    start += DEFAULT_QUERY_ALL_COUNT;\n  }\n  batches.push(fn(start, end - 1));\n  return await Promise.all(batches);\n}\n\nexport { isWinningBid as a, getAllInBatches as g, handleTokenApproval as h, isTokenApprovedForTransfer as i, mapOffer as m, validateNewListingParam as v };\n","import { utils } from 'ethers';\nimport { C as ContractEncoder, f as fetchCurrencyMetadata } from './fetchCurrencyValue-ca929de6.browser.esm.js';\nimport { h as hasERC20Allowance } from './hasERC20Allowance-97a16e86.browser.esm.js';\nimport { n as normalizePriceValue } from './normalizePriceValue-2bd5325b.browser.esm.js';\nimport { dC as MULTIWRAP_CONTRACT_ROLES, cq as ContractWrapper, bj as AbiSchema, dD as MultiwrapContractSchema, aL as resolveAddress } from './index-c67c8d87.browser.esm.js';\nimport { i as isTokenApprovedForTransfer } from './marketplace-643179e0.browser.esm.js';\nimport { b as uploadOrExtractURI } from './QueryParams-489c04ee.browser.esm.js';\nimport { d as buildTransactionFunction, T as Transaction } from './transactions-d1b63e67.browser.esm.js';\nimport { C as ContractMetadata, b as ContractAppURI, G as GasCostEstimator, a as ContractEvents } from './contract-appuri-8a73f5ec.browser.esm.js';\nimport { C as ContractRoyalty, a as ContractOwner } from './contract-owner-29132da9.browser.esm.js';\nimport { C as ContractRoles } from './contract-roles-80a71d71.browser.esm.js';\nimport { S as StandardErc721 } from './erc-721-standard-d1c2d576.browser.esm.js';\nimport 'zod';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/crypto';\nimport 'tiny-invariant';\nimport 'bn.js';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport 'eventemitter3';\nimport './setErc20Allowance-4ec0c078.browser.esm.js';\nimport '@thirdweb-dev/storage';\nimport './signature-74888765.browser.esm.js';\nimport '@thirdweb-dev/merkletree';\nimport './assertEnabled-51677c66.browser.esm.js';\nimport 'uuid';\nimport './erc-721-b9f4c026.browser.esm.js';\nimport './drop-claim-conditions-03410598.browser.esm.js';\nimport 'fast-deep-equal';\n\n/**\n * Multiwrap lets you wrap any number of ERC20, ERC721 and ERC1155 tokens you own into a single wrapped token bundle.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"multiwrap\");\n * ```\n *\n * @beta\n */\n// TODO create extension wrappers for this\nclass Multiwrap extends StandardErc721 {\n  static contractRoles = MULTIWRAP_CONTRACT_ROLES;\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = AbiSchema.parse(abi || []);\n    this.metadata = new ContractMetadata(this.contractWrapper, MultiwrapContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Multiwrap.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.owner = new ContractOwner(this.contractWrapper);\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the contents of a wrapped token bundle\n   * @example\n   * ```javascript\n   * const contents = await contract.getWrappedContents(wrappedTokenId);\n   * console.log(contents.erc20Tokens);\n   * console.log(contents.erc721Tokens);\n   * console.log(contents.erc1155Tokens);\n   * ```\n   * @param wrappedTokenId - the id of the wrapped token bundle\n   */\n  async getWrappedContents(wrappedTokenId) {\n    const wrappedTokens = await this.contractWrapper.read(\"getWrappedContents\", [wrappedTokenId]);\n    const erc20Tokens = [];\n    const erc721Tokens = [];\n    const erc1155Tokens = [];\n    for (const token of wrappedTokens) {\n      switch (token.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), token.assetContract);\n            erc20Tokens.push({\n              contractAddress: token.assetContract,\n              quantity: utils.formatUnits(token.totalAmount, tokenMetadata.decimals)\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Tokens.push({\n              contractAddress: token.assetContract,\n              tokenId: token.tokenId\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Tokens.push({\n              contractAddress: token.assetContract,\n              tokenId: token.tokenId,\n              quantity: token.totalAmount.toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Tokens,\n      erc721Tokens,\n      erc1155Tokens\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Wrap any number of ERC20/ERC721/ERC1155 tokens into a single wrapped token\n   * @example\n   * ```javascript\n   * const tx = await contract.wrap({\n   *   erc20Tokens: [{\n   *     contractAddress: \"0x...\",\n   *     quantity: \"0.8\"\n   *   }],\n   *   erc721Tokens: [{\n   *     contractAddress: \"0x...\",\n   *     tokenId: \"0\"\n   *   }],\n   *   erc1155Tokens: [{\n   *     contractAddress: \"0x...\",\n   *     tokenId: \"1\",\n   *     quantity: \"2\"\n   *   }]\n   * }, {\n   *     name: \"Wrapped bundle\",\n   *     description: \"This is a wrapped bundle of tokens and NFTs\",\n   *     image: \"ipfs://...\",\n   * });\n   * const receipt = tx.receipt(); // the transaction receipt\n   * const wrappedTokenId = tx.id; // the id of the wrapped token bundle\n   * ```\n   * @param contents - the contents to wrap\n   * @param wrappedTokenMetadata - metadata to represent the wrapped token bundle\n   * @param recipientAddress - Optional. The address to send the wrapped token bundle to\n   */\n  wrap = /* @__PURE__ */buildTransactionFunction(async (contents, wrappedTokenMetadata, recipientAddress) => {\n    const [uri, tokens, recipient] = await Promise.all([uploadOrExtractURI(wrappedTokenMetadata, this.storage), this.toTokenStructList(contents), resolveAddress(recipientAddress ? recipientAddress : await this.contractWrapper.getSignerAddress())]);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"wrap\",\n      args: [tokens, uri, recipient],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"TokensWrapped\", receipt?.logs);\n        if (event.length === 0) {\n          throw new Error(\"TokensWrapped event not found\");\n        }\n        const tokenId = event[0].args.tokenIdOfWrappedToken;\n        return {\n          id: tokenId,\n          receipt,\n          data: () => this.get(tokenId)\n        };\n      }\n    });\n  });\n\n  /**\n   * Unwrap a wrapped token bundle, and retrieve its contents\n   * @example\n   * ```javascript\n   * await contract.unwrap(wrappedTokenId);\n   * ```\n   * @param wrappedTokenId - the id of the wrapped token bundle\n   * @param recipientAddress - Optional. The address to send the unwrapped tokens to\n   */\n  unwrap = /* @__PURE__ */buildTransactionFunction(async (wrappedTokenId, recipientAddress) => {\n    const recipient = await resolveAddress(recipientAddress ? recipientAddress : await this.contractWrapper.getSignerAddress());\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"unwrap\",\n      args: [wrappedTokenId, recipient]\n    });\n  });\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async toTokenStructList(contents) {\n    const tokens = [];\n    const provider = this.contractWrapper.getProvider();\n    const owner = await this.contractWrapper.getSignerAddress();\n    if (contents.erc20Tokens) {\n      for (const erc20 of contents.erc20Tokens) {\n        const normalizedQuantity = await normalizePriceValue(provider, erc20.quantity, erc20.contractAddress);\n        const hasAllowance = await hasERC20Allowance(this.contractWrapper, erc20.contractAddress, normalizedQuantity);\n        if (!hasAllowance) {\n          throw new Error(`ERC20 token with contract address \"${erc20.contractAddress}\" does not have enough allowance to transfer.\\n\\nYou can set allowance to the multiwrap contract to transfer these tokens by running:\\n\\nawait sdk.getToken(\"${erc20.contractAddress}\").setAllowance(\"${this.getAddress()}\", ${erc20.quantity});\\n\\n`);\n        }\n        tokens.push({\n          assetContract: erc20.contractAddress,\n          totalAmount: normalizedQuantity,\n          tokenId: 0,\n          tokenType: 0\n        });\n      }\n    }\n    if (contents.erc721Tokens) {\n      for (const erc721 of contents.erc721Tokens) {\n        const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc721.contractAddress, erc721.tokenId, owner);\n        if (!isApproved) {\n          throw new Error(`ERC721 token \"${erc721.tokenId}\" with contract address \"${erc721.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getNFTCollection(\"${erc721.contractAddress}\").setApprovalForToken(\"${this.getAddress()}\", ${erc721.tokenId});\\n\\n`);\n        }\n        tokens.push({\n          assetContract: erc721.contractAddress,\n          totalAmount: 0,\n          tokenId: erc721.tokenId,\n          tokenType: 1\n        });\n      }\n    }\n    if (contents.erc1155Tokens) {\n      for (const erc1155 of contents.erc1155Tokens) {\n        const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc1155.contractAddress, erc1155.tokenId, owner);\n        if (!isApproved) {\n          throw new Error(`ERC1155 token \"${erc1155.tokenId}\" with contract address \"${erc1155.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getEdition(\"${erc1155.contractAddress}\").setApprovalForAll(\"${this.getAddress()}\", true);\\n\\n`);\n        }\n        tokens.push({\n          assetContract: erc1155.contractAddress,\n          totalAmount: erc1155.quantity,\n          tokenId: erc1155.tokenId,\n          tokenType: 2\n        });\n      }\n    }\n    return tokens;\n  }\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { Multiwrap };\n"],"names":["StandardErc721","chainId","this","_chainId","constructor","contractWrapper","storage","_defineProperty","buildTransactionFunction","async","to","tokenId","erc721","transfer","prepare","operator","approved","setApprovalForAll","Transaction","fromContractWrapper","method","args","resolveAddress","Erc721","onNetworkUpdated","network","updateSignerOrProvider","getAddress","address","getAll","queryParams","getOwned","walletAddress","getOwnedTokenIds","totalSupply","totalCirculatingSupply","get","ownerOf","balanceOf","balance","isApproved","hasERC20Allowance","contractToApprove","currencyAddress","value","provider","getProvider","ERC20Abi","default","erc20","ContractWrapper","owner","getSignerAddress","spender","read","gte","isTokenApprovedForTransfer","transferrerContractAddress","assetContract","ERC165Abi","erc165","Contract","isERC721","isERC1155","Promise","all","supportsInterface","InterfaceId_IERC721","InterfaceId_IERC1155","_approvedAddress","ERC721Abi","asset","isApprovedForAll","approvedAddress","getApproved","e","toLowerCase","ERC1155Abi","console","error","err","handleTokenApproval","marketplaceAddress","from","getSignerOrProvider","options","sendTransaction","Error","validateNewListingParam","param","invariant","undefined","assetContractAddress","buyoutPricePerToken","listingDurationInSeconds","startTimestamp","quantity","type","reservePricePerToken","mapOffer","listingId","offer","quantityDesired","pricePerToken","currencyContractAddress","currency","buyerAddress","offeror","quantityWanted","currencyValue","fetchCurrencyValue","mul","isWinningBid","winningPrice","newBidPrice","bidBuffer","BigNumber","eq","sub","MAX_BPS","div","getAllInBatches","start","end","fn","batches","DEFAULT_QUERY_ALL_COUNT","push","Multiwrap","arguments","length","abi","super","contents","wrappedTokenMetadata","recipientAddress","uri","tokens","recipient","uploadOrExtractURI","toTokenStructList","parse","receipt","event","parseLogs","logs","tokenIdOfWrappedToken","id","data","wrappedTokenId","AbiSchema","metadata","ContractMetadata","MultiwrapContractSchema","app","ContractAppURI","roles","ContractRoles","contractRoles","encoder","ContractEncoder","estimator","GasCostEstimator","events","ContractEvents","royalties","ContractRoyalty","ContractOwner","getWrappedContents","wrappedTokens","erc20Tokens","erc721Tokens","erc1155Tokens","token","tokenType","tokenMetadata","fetchCurrencyMetadata","contractAddress","utils","totalAmount","decimals","toString","normalizedQuantity","normalizePriceValue","concat","erc1155","overrides","call","functionName","MULTIWRAP_CONTRACT_ROLES"],"sourceRoot":""}