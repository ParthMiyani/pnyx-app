{"version":3,"file":"static/js/1926.cde4279b.chunk.js","mappings":"iOAWA,MAAMA,EAAqC,KAAOC,EAAAA,SAAe,cAAtB,GAKrCC,EAAsC,KAAOD,EAAAA,SAAe,cAAtB,GAEtCE,EAAoB,CACxBC,KAAM,+BAWRC,eAAeC,EAAmBC,EAASC,EAAUC,GAEnD,GAAID,EAASE,WAAW,iCAAqD,qBAAXC,OAAwB,CACxF,MAAMC,EAASJ,EAASK,MAAM,KAAK,GAC7BC,EAAeC,KAAKC,MAAML,OAAOM,KAAKL,EAAQ,UAAUM,SAAS,UACvE,OAAOC,EAAAA,EAAgBH,MAAM,IACxBF,EACHM,GAAIC,EAAAA,GAAUJ,KAAKV,GAASW,WAC5BI,IAAKd,GAET,CAEA,MAAMe,EAAYf,EAASgB,QAAQ,OAAQvB,EAAAA,WAAiBoB,EAAAA,GAAUJ,KAAKV,GAASkB,cAAe,IAAIC,MAAM,IAC7G,IAAIZ,EACJ,IACEA,QAAqBL,EAAQkB,aAAaJ,EAC5C,CAAE,MAAOK,GACP,MAAMC,EAAqBrB,EAASgB,QAAQ,OAAQH,EAAAA,GAAUJ,KAAKV,GAASW,YAC5E,IACEJ,QAAqBL,EAAQkB,aAAaE,EAC5C,CAAE,MAAOC,GACPC,QAAQC,KAAK,iCAADC,OAAkClB,KAAKmB,UAAU,CAC3D3B,QAASA,EAAQW,WACjBV,aACA,yCACFM,EAAeX,CACjB,CACF,CACA,OAAOgB,EAAAA,EAAgBH,MAAM,IACxBF,EACHM,GAAIC,EAAAA,GAAUJ,KAAKV,GAASW,WAC5BI,IAAKd,GAET,CAUAH,eAAe8B,EAA8BC,EAAiBC,EAAU9B,EAASE,GAC/E,IAAIa,EACJ,MAAMgB,SAA2B,sCAA6DC,QACxFC,EAAS,IAAIC,EAAAA,GAASL,EAAiBE,EAAmBD,IACzDK,EAAUC,SAAmBC,QAAQC,IAAI,CAACL,EAAOM,kBAAkB9C,GAAsBwC,EAAOM,kBAAkB5C,KACzH,GAAIwC,EAAU,CACZ,MAAMK,SAA2B,8CAAqER,QAChGS,EAAS,IAAIP,EAAAA,GAASL,EAAiBW,EAAmBV,GAChEf,QAAY0B,EAAOC,SAAS1C,EAC9B,KAAO,KAAIoC,EAKT,MAAMO,MAAM,gDALQ,CACpB,MAAMC,SAA4B,8CAAsEZ,QAClGa,EAAU,IAAIX,EAAAA,GAASL,EAAiBe,EAAoBd,GAClEf,QAAY8B,EAAQ9B,IAAIf,EAC1B,CAEA,CACA,OAAKe,EAQEhB,EAAmBC,EAASe,EAAKb,GAN/BU,EAAAA,EAAgBH,MAAM,IACxBb,EACHiB,GAAIC,EAAAA,GAAUJ,KAAKV,GAASW,WAC5BI,IAAK,IAIX,CAOAjB,eAAegD,EAAmBC,EAAU7C,GAC1C,MAAwB,kBAAb6C,EACFA,QAEM7C,EAAQ8C,OAAOC,EAAAA,EAAexC,MAAMsC,GAErD,CAWAjD,eAAeoD,EAAoBC,EAAWjD,EAASkD,EAAaC,GAClE,GA0BF,SAAmBF,GACjB,YAAsDG,IAA/CH,EAAUI,MAAKC,GAAkB,kBAANA,GACpC,CA5BMC,CAAUN,GACZ,OAAOA,EACF,GA2BT,SAAwBA,GACtB,YAAsDG,IAA/CH,EAAUI,MAAKC,GAAkB,kBAANA,GACpC,CA7BaE,CAAeP,GAAY,CAOpC,aANmBjD,EAAQyD,YAAYR,EAAUS,KAAIJ,GAAKP,EAAAA,EAAexC,MAAM+C,KAAK,CAClFK,iBAAkB,CAChBC,gBAAiBV,GAAe,GAElCW,WAAmB,OAAPV,QAAO,IAAPA,OAAO,EAAPA,EAASU,YAGzB,CACE,MAAM,IAAIpB,MAAM,+EAEpB,CACA,SAASqB,EAAoBC,GAC3B,MAAMC,EAAUD,EAAK,GAAGE,UAAU,EAAGF,EAAK,GAAGG,YAAY,MACzD,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAKK,OAAQD,IAAK,CACpC,MAAMtD,EAAMkD,EAAKI,GAAGF,UAAU,EAAGF,EAAKI,GAAGD,YAAY,MACrD,GAAIF,IAAYnD,EACd,MAAM,IAAI4B,MAAM,0FAADjB,OAA2FwC,EAAO,eAAAxC,OAAcX,EAAG,KAEtI,CAGA,OAAOmD,EAAQjD,QAAQ,MAAO,IAAM,GACtC,CAWA,MAAMsD,EAA0B,G,+FC3JhC,MAAMC,EAA+B,KAAOC,EAAAA,EAAEC,MAAM,CAACD,EAAAA,EAAEE,OAAOC,WAAUP,GAC/DvD,EAAAA,GAAUJ,KAAKmE,KAAKC,MAAMT,EAAEU,UAAY,QAC7CN,EAAAA,EAAEO,SAASJ,WAAUP,GAChBvD,EAAAA,GAAUJ,KAAK2D,OAHa,GAS/BY,EAAiC,KAAOT,EAAcxC,QAAQ,IAAIkD,KAAK,IAAtC,GAKjCC,EAA+B,KAAOX,EAAcxC,QAAQ,IAAIkD,KAAKA,KAAKE,MAAQ,UAAnD,GAQrC,SAASC,EAAcC,EAAWC,GAChC,IAAKD,EACH,MAAM,IAAIE,EAAAA,EAA6BD,GAEzC,OAAOD,CACT,C,mCC3BA,MAAMG,EACJC,WAAAA,CAAYC,GACVC,KAAKD,gBAAkBA,CACzB,CAcAE,uBAAAA,CAAwBC,GACtBF,KAAKD,gBAAgBI,wBAAwBD,EAC/C,E,kMC8EF,MAAME,EA4CJ,kBAAIC,GACF,OAAOZ,EAAAA,EAAAA,GAAcO,KAAKM,uBAAwBC,EAAAA,GACpD,CA2CA,mBAAIC,GACF,OAAOf,EAAAA,EAAAA,GAAcO,KAAKS,wBAAyBC,EAAAA,GACrD,CAiCA,UAAIC,GACF,OAAOlB,EAAAA,EAAAA,GAAcO,KAAKY,eAAgBC,EAAAA,GAC5C,CACA,WAAIC,GACF,OAAOd,KAAKe,QACd,CACAjB,WAAAA,CAAYkB,EAASC,EAAS3G,GAC5B,IAAImD,EAAUyD,UAAUxC,OAAS,QAAsBhB,IAAjBwD,UAAU,GAAmBA,UAAU,GAAK,CAAC,EAC/EC,EAAMD,UAAUxC,OAAS,EAAIwC,UAAU,QAAKxD,EAC5CoD,EAAUI,UAAUxC,OAAS,EAAIwC,UAAU,QAAKxD,EAChDqC,EAAkBmB,UAAUxC,OAAS,QAAsBhB,IAAjBwD,UAAU,GAAmBA,UAAU,GAAK,IAAIE,EAAAA,GAAgBJ,EAASC,EAASE,EAAK1D,EAASnD,GAC9I0F,KAAKe,SAAWD,EAChBd,KAAKmB,IAAME,EAAAA,GAAUxG,MAAMsG,GAAO,IAClCnB,KAAKD,gBAAkBA,EACvBC,KAAK1F,QAAUA,EACf0F,KAAK7C,SAAW,IAAImE,EAAAA,EAAiBtB,KAAKD,gBAAiBwB,EAAAA,GAA2BvB,KAAK1F,SAC3F0F,KAAKwB,IAAM,IAAIC,EAAAA,EAAezB,KAAKD,gBAAiBC,KAAK7C,SAAU6C,KAAK1F,SACxE0F,KAAK0B,MAAQ,IAAIC,EAAAA,EAAc3B,KAAKD,gBAAiBK,EAAcwB,eACnE5B,KAAK6B,QAAU,IAAIC,EAAAA,EAAgB9B,KAAKD,iBACxCC,KAAK+B,UAAY,IAAIC,EAAAA,EAAiBhC,KAAKD,iBAC3CC,KAAKiC,OAAS,IAAIC,EAAAA,EAAelC,KAAKD,iBACtCC,KAAKmC,aAAe,IAAIC,EAAAA,EAAoBpC,KAAKD,iBACjDC,KAAKqC,YAAc,IAAIxC,EAAAA,EAAoBG,KAAKD,gBAClD,CACAuC,gBAAAA,CAAiBtB,GACfhB,KAAKD,gBAAgBwC,uBAAuBvB,EAC9C,CACAwB,UAAAA,GACE,OAAOxC,KAAKD,gBAAgBkB,OAC9B,CAKA,aAAMwB,CAAQC,EAAQC,EAAMC,GAC1B,OAAOC,EAAAA,EAAYC,oBAAoB,CACrC/C,gBAAiBC,KAAKD,gBACtB2C,SACAC,OACAC,aAEJ,CAKA,UAAMG,CAAKC,EAAcL,EAAMC,GAC7B,OAAO5C,KAAKD,gBAAgBgD,KAAKC,EAAcL,EAAMC,EACvD,CAMAtC,oBAAAA,GACE,IAAI2C,EAAAA,EAAAA,GAAsBjD,KAAKD,gBAAiB,kBAC9C,OAAO,IAAImD,EAAAA,EAA4BlD,KAAKD,gBAAiBC,KAAK1F,QAGtE,CACAmG,qBAAAA,GACE,IAAIwC,EAAAA,EAAAA,GAAsBjD,KAAKD,gBAAiB,mBAC9C,OAAO,IAAIoD,EAAAA,EAA6BnD,KAAKD,gBAAiBC,KAAK1F,QAGvE,CACAsG,YAAAA,GACE,IAAIqC,EAAAA,EAAAA,GAAsBjD,KAAKD,gBAAiB,UAC9C,OAAO,IAAIqD,EAAAA,EAAoBpD,KAAKD,gBAAiBC,KAAK1F,QAG9D,GACD+I,EAAAA,EAAAA,GApMKjD,EAAa,gBACMkD,EAAAA,G,wGClGzB,MAAMC,EAAiC,KAAO1E,EAAAA,EAAE2E,OAAO,CAAC,GAAGC,SAAS5E,EAAAA,EAAEC,MAAM,CAAC4E,EAAAA,GAA0B7E,EAAAA,EAAE8E,aAAlE,GAKjCC,EAAyC,KAAO/E,EAAAA,EAAEC,MAAM,CAACD,EAAAA,EAAEgF,MAAMN,GAAkBA,IAAkBO,WAAWC,WAAvE,GAKzCC,EAA+B,KAAOnF,EAAAA,EAAE2E,OAAO,CACnDvJ,KAAM4E,EAAAA,EAAEC,MAAM,CAACD,EAAAA,EAAEoF,SAAUpF,EAAAA,EAAEO,WAAW0E,WAAWC,WACnDG,YAAarF,EAAAA,EAAEoF,SAASF,WAAWD,WAAWC,WAC9CI,MAAOC,EAAAA,GAA2BL,WAAWD,WAC7CO,cAAeD,EAAAA,GAA2BN,WAAWC,aAJlB,GAU/B1G,EAAgC,KAAO2G,EAAcM,OAAO,CAChEC,aAAcH,EAAAA,GAA2BL,WAAWD,WACpDU,iBAAkBC,EAAAA,GAASX,WAAWC,WACtCW,WAAYd,EACZe,WAAYf,IACXH,SAAS5E,EAAAA,EAAEC,MAAM,CAAC4E,EAAAA,GAA0B7E,EAAAA,EAAE8E,aALX,GAUhCiB,EAAqC,KAAO/F,EAAAA,EAAEC,MAAM,CAACzB,EAAgBwB,EAAAA,EAAEoF,WAAlC,GAKrCjJ,EAAiC,KAAOqC,EAAeiH,OAAO,CAClErJ,GAAI4D,EAAAA,EAAEoF,SACN9I,IAAK0D,EAAAA,EAAEoF,SACPE,MAAOtF,EAAAA,EAAEoF,SAASF,WAAWD,WAC7BS,aAAc1F,EAAAA,EAAEoF,SAASF,WAAWD,WACpCO,cAAexF,EAAAA,EAAEoF,SAASF,WAAWD,aALA,GA+BvC5J,eAAe2K,EAAkBC,EAAmBC,EAAOC,EAAiBpC,GAC1E,KAAIqC,EAAAA,EAAAA,GAAcD,GAEX,CACL,MAAME,SAAkB,8CAA4D9I,QAC9E+I,EAASL,EAAkBM,YAC3BlJ,EAAW4I,EAAkBO,cAC7BC,EAAQ,IAAIlE,EAAAA,GAAgB+D,GAAUjJ,EAAU8I,EAAiBE,EAAUJ,EAAkBrH,QAASqH,EAAkBxK,SACxHiL,QAAcT,EAAkBU,mBAChCC,EAAUX,EAAkB7D,QAMlC,aALwBqE,EAAMI,KAAK,YAAa,CAACH,EAAOE,KAC1CE,GAAGZ,UAETO,EAAMM,gBAAgB,UAAW,CAACH,EAASV,IAE5CnC,CACT,CAdEA,EAAiB,MAAImC,CAezB,C","sources":["../node_modules/@thirdweb-dev/sdk/dist/QueryParams-489c04ee.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/assertEnabled-51677c66.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/contract-interceptor-d7b164a7.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/marketplacev3-d17d2ba1.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/setErc20Allowance-4ec0c078.browser.esm.js"],"sourcesContent":["import { C as CommonNFTOutput, a as CommonNFTInput } from './setErc20Allowance-4ec0c078.browser.esm.js';\nimport { utils, BigNumber, Contract } from 'ethers';\nimport 'zod';\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\nconst InterfaceId_IERC721 = /* @__PURE__ */(() => utils.arrayify(\"0x80ac58cd\"))();\n\n/**\n * @internal\n */\nconst InterfaceId_IERC1155 = /* @__PURE__ */(() => utils.arrayify(\"0xd9b67a26\"))();\n\nconst FALLBACK_METADATA = {\n  name: \"Failed to load NFT metadata\"\n};\n\n/**\n * fetches the token metadata\n * @param tokenId - the id (to get it back in the output)\n * @param tokenUri - the uri to fetch\n * @param storage - which storage to fetch from\n *\n * @internal\n */\nasync function fetchTokenMetadata(tokenId, tokenUri, storage) {\n  // check for base64 encoded JSON\n  if (tokenUri.startsWith(\"data:application/json;base64\") && typeof Buffer !== \"undefined\") {\n    const base64 = tokenUri.split(\",\")[1];\n    const jsonMetadata = JSON.parse(Buffer.from(base64, \"base64\").toString(\"utf-8\"));\n    return CommonNFTOutput.parse({\n      ...jsonMetadata,\n      id: BigNumber.from(tokenId).toString(),\n      uri: tokenUri\n    });\n  }\n  // handle dynamic id URIs (2 possible formats)\n  const parsedUri = tokenUri.replace(\"{id}\", utils.hexZeroPad(BigNumber.from(tokenId).toHexString(), 32).slice(2));\n  let jsonMetadata;\n  try {\n    jsonMetadata = await storage.downloadJSON(parsedUri);\n  } catch (err) {\n    const unparsedTokenIdUri = tokenUri.replace(\"{id}\", BigNumber.from(tokenId).toString());\n    try {\n      jsonMetadata = await storage.downloadJSON(unparsedTokenIdUri);\n    } catch (e) {\n      console.warn(`failed to get token metadata: ${JSON.stringify({\n        tokenId: tokenId.toString(),\n        tokenUri\n      })} -- falling back to default metadata`);\n      jsonMetadata = FALLBACK_METADATA;\n    }\n  }\n  return CommonNFTOutput.parse({\n    ...jsonMetadata,\n    id: BigNumber.from(tokenId).toString(),\n    uri: tokenUri\n  });\n}\n\n// Used for marketplace to fetch NFT metadata from contract address + tokenId\n/**\n * @internal\n * @param contractAddress - the contract address\n * @param provider - the provider to use\n * @param tokenId - the token id\n * @param storage - the storage to use\n */\nasync function fetchTokenMetadataForContract(contractAddress, provider, tokenId, storage) {\n  let uri;\n  const ERC165MetadataAbi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC165.json')).default;\n  const erc165 = new Contract(contractAddress, ERC165MetadataAbi, provider);\n  const [isERC721, isERC1155] = await Promise.all([erc165.supportsInterface(InterfaceId_IERC721), erc165.supportsInterface(InterfaceId_IERC1155)]);\n  if (isERC721) {\n    const ERC721MetadataAbi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json')).default;\n    const erc721 = new Contract(contractAddress, ERC721MetadataAbi, provider);\n    uri = await erc721.tokenURI(tokenId);\n  } else if (isERC1155) {\n    const ERC1155MetadataAbi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json')).default;\n    const erc1155 = new Contract(contractAddress, ERC1155MetadataAbi, provider);\n    uri = await erc1155.uri(tokenId);\n  } else {\n    throw Error(\"Contract must implement ERC 1155 or ERC 721.\");\n  }\n  if (!uri) {\n    // no uri found, return fallback metadata\n    return CommonNFTOutput.parse({\n      ...FALLBACK_METADATA,\n      id: BigNumber.from(tokenId).toString(),\n      uri: \"\"\n    });\n  }\n  return fetchTokenMetadata(tokenId, uri, storage);\n}\n\n/**\n * @internal\n * @param metadata - the metadata to upload\n * @param storage - the storage to use\n */\nasync function uploadOrExtractURI(metadata, storage) {\n  if (typeof metadata === \"string\") {\n    return metadata;\n  } else {\n    return await storage.upload(CommonNFTInput.parse(metadata));\n  }\n}\n\n/**\n * @internal\n * @param metadatas - the metadata to upload\n * @param storage - the storage to use\n * @param startNumber - the number to start the file names at\n * @param contractAddress - the contract address\n * @param signerAddress - the signer address\n * @param options - options\n */\nasync function uploadOrExtractURIs(metadatas, storage, startNumber, options) {\n  if (isUriList(metadatas)) {\n    return metadatas;\n  } else if (isMetadataList(metadatas)) {\n    const uris = await storage.uploadBatch(metadatas.map(m => CommonNFTInput.parse(m)), {\n      rewriteFileNames: {\n        fileStartNumber: startNumber || 0\n      },\n      onProgress: options?.onProgress\n    });\n    return uris;\n  } else {\n    throw new Error(\"NFT metadatas must all be of the same type (all URI or all NFTMetadataInput)\");\n  }\n}\nfunction getBaseUriFromBatch(uris) {\n  const baseUri = uris[0].substring(0, uris[0].lastIndexOf(\"/\"));\n  for (let i = 0; i < uris.length; i++) {\n    const uri = uris[i].substring(0, uris[i].lastIndexOf(\"/\"));\n    if (baseUri !== uri) {\n      throw new Error(`Can only create batches with the same base URI for every entry in the batch. Expected '${baseUri}' but got '${uri}'`);\n    }\n  }\n\n  // Ensure that baseUri ends with trailing slash\n  return baseUri.replace(/\\/$/, \"\") + \"/\";\n}\nfunction isUriList(metadatas) {\n  return metadatas.find(m => typeof m !== \"string\") === undefined;\n}\nfunction isMetadataList(metadatas) {\n  return metadatas.find(m => typeof m !== \"object\") === undefined;\n}\n\n/**\n * @internal\n */\nconst DEFAULT_QUERY_ALL_COUNT = 100;\n\n/**\n * Pagination Parameters\n * @public\n */\n\nexport { DEFAULT_QUERY_ALL_COUNT as D, FALLBACK_METADATA as F, InterfaceId_IERC721 as I, InterfaceId_IERC1155 as a, uploadOrExtractURI as b, fetchTokenMetadataForContract as c, fetchTokenMetadata as f, getBaseUriFromBatch as g, uploadOrExtractURIs as u };\n","import { BigNumber } from 'ethers';\nimport { z } from 'zod';\nimport { x as ExtensionNotImplementedError } from './index-c67c8d87.browser.esm.js';\n\nconst RawDateSchema = /* @__PURE__ */(() => z.union([z.date().transform(i => {\n  return BigNumber.from(Math.floor(i.getTime() / 1000));\n}), z.number().transform(i => {\n  return BigNumber.from(i);\n})]))();\n\n/**\n * Default to now\n */\nconst StartDateSchema = /* @__PURE__ */(() => RawDateSchema.default(new Date(0)))();\n\n/**\n * Default to 10 years from now\n */\nconst EndDateSchema = /* @__PURE__ */(() => RawDateSchema.default(new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10)))();\n\n/**\n * Checks whether the given DetectableFeature is defined\n * @internal\n * @param namespace - The namespace to check\n * @param feature - The corresponding feature\n */\nfunction assertEnabled(namespace, feature) {\n  if (!namespace) {\n    throw new ExtensionNotImplementedError(feature);\n  }\n  return namespace;\n}\n\nexport { EndDateSchema as E, RawDateSchema as R, StartDateSchema as S, assertEnabled as a };\n","/**\n * Allows overriding transaction behavior for this contract\n * @internal\n */\nclass ContractInterceptor {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * The next transaction executed will add/replace any overrides passed via the passed in hook.\n   * @remarks Overridden values will be applied to the next transaction executed.\n   * @example\n   * ```javascript\n   * contract.interceptor.overrideNextTransaction(() => ({\n   *   gasLimit: 3000000,\n   * }));\n   * ```\n   * @param hook - the hook to add or replace any CallOverrides (gas limit, gas price, nonce, from, value, etc...)\n   * @public\n   */\n  overrideNextTransaction(hook) {\n    this.contractWrapper.withTransactionOverride(hook);\n  }\n}\n\nexport { ContractInterceptor as C };\n","import { a as assertEnabled } from './assertEnabled-51677c66.browser.esm.js';\nimport { C as ContractMetadata, b as ContractAppURI, G as GasCostEstimator, a as ContractEvents, d as detectContractFeature } from './contract-appuri-8a73f5ec.browser.esm.js';\nimport { dB as MARKETPLACE_CONTRACT_ROLES, dv as FEATURE_DIRECT_LISTINGS, dw as FEATURE_ENGLISH_AUCTIONS, dx as FEATURE_OFFERS, cq as ContractWrapper, bj as AbiSchema, bZ as MarketplaceContractSchema } from './index-c67c8d87.browser.esm.js';\nimport { C as ContractEncoder } from './fetchCurrencyValue-ca929de6.browser.esm.js';\nimport { C as ContractInterceptor } from './contract-interceptor-d7b164a7.browser.esm.js';\nimport { C as ContractPlatformFee } from './contract-platform-fee-9cd02358.browser.esm.js';\nimport { C as ContractRoles } from './contract-roles-80a71d71.browser.esm.js';\nimport { M as MarketplaceV3DirectListings, a as MarketplaceV3EnglishAuctions, b as MarketplaceV3Offers } from './marketplacev3-offers-f7d49518.browser.esm.js';\nimport { T as Transaction } from './transactions-d1b63e67.browser.esm.js';\nimport 'ethers';\nimport 'zod';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/crypto';\nimport 'tiny-invariant';\nimport 'bn.js';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport 'eventemitter3';\nimport './cleanCurrencyAddress-89e53f5c.browser.esm.js';\nimport './normalizePriceValue-2bd5325b.browser.esm.js';\nimport './setErc20Allowance-4ec0c078.browser.esm.js';\nimport './marketplace-643179e0.browser.esm.js';\nimport './QueryParams-489c04ee.browser.esm.js';\n\n/**\n * Create your own whitelabel marketplace that enables users to buy and sell any digital assets.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"marketplace\");\n * ```\n *\n * @internal\n * @deprecated use contract.directListings / contract.auctions / contract.offers instead\n */\nclass MarketplaceV3 {\n  static contractRoles = MARKETPLACE_CONTRACT_ROLES;\n\n  /**\n   * @internal\n   */\n\n  /**\n   * Direct listings\n   * @remarks Create and manage direct listings in your marketplace.\n   * ```javascript\n   * // Data of the listing you want to create\n   * const listing = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // The price to pay per unit of NFTs listed.\n   *   pricePerToken: 1.5,\n   *   // when should the listing open up for offers\n   *   startTimestamp: new Date(Date.now()),\n   *   // how long the listing will be open for\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   *   // Whether the listing is reserved for a specific set of buyers.\n   *   isReservedListing: false\n   * }\n   *\n   * const tx = await contract.directListings.createListing(listing);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   *\n   * // And on the buyers side:\n   * // The ID of the listing you want to buy from\n   * const listingId = 0;\n   * // Quantity of the asset you want to buy\n   * const quantityDesired = 1;\n   *\n   * await contract.directListings.buyFromListing(listingId, quantityDesired);\n   * ```\n   */\n  get directListings() {\n    return assertEnabled(this.detectDirectListings(), FEATURE_DIRECT_LISTINGS);\n  }\n  /**\n   * Auctions\n   * @remarks Create and manage auctions in your marketplace.\n   * @example\n   * ```javascript\n   * // Data of the auction you want to create\n   * const auction = {\n   *   // address of the contract of the asset you want to auction\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to auction\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to auction\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the auctioned tokens\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // the minimum bid that will be accepted for the token\n   *   minimumBidAmount: \"1.5\",\n   *   // how much people would have to bid to instantly buy the asset\n   *   buyoutBidAmount: \"10\",\n   *   // If a bid is made less than these many seconds before expiration, the expiration time is increased by this.\n   *   timeBufferInSeconds: \"1000\",\n   *   // A bid must be at least this much bps greater than the current winning bid\n   *   bidBufferBps: \"100\", // 100 bps stands for 1%\n   *   // when should the auction open up for bidding\n   *   startTimestamp: new Date(Date.now()),\n   *   // end time of auction\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   * }\n   *\n   * const tx = await contract.englishAuctions.createAuction(auction);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created auction\n   *\n   * // And on the buyers side:\n   * // The auction ID of the asset you want to bid on\n   * const auctionId = 0;\n   * // The total amount you are willing to bid for auctioned tokens\n   * const bidAmount = 1;\n   *\n   * await contract.englishAuctions.makeBid(auctionId, bidAmount);\n   * ```\n   */\n  get englishAuctions() {\n    return assertEnabled(this.detectEnglishAuctions(), FEATURE_ENGLISH_AUCTIONS);\n  }\n\n  /**\n   * Offers\n   * @remarks Make and manage offers.\n   * @example\n   * ```javascript\n   * // Data of the offer you want to make\n   * const offer = {\n   *   // address of the contract the asset you want to make an offer for\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to buy\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to buy\n   *   quantity: 1,\n   *   // address of the currency contract that you offer to pay in\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // Total price you offer to pay for the mentioned token(s)\n   *   totalPrice: \"1.5\",\n   *   // Offer valid until\n   *   endTimestamp: new Date(),\n   * }\n   *\n   * const tx = await contract.offers.makeOffer(offer);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created offer\n   *\n   * // And on the seller's side:\n   * // The ID of the offer you want to accept\n   * const offerId = 0;\n   * await contract.offers.acceptOffer(offerId);\n   * ```\n   */\n  get offers() {\n    return assertEnabled(this.detectOffers(), FEATURE_OFFERS);\n  }\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    this._chainId = chainId;\n    this.abi = AbiSchema.parse(abi || []);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(this.contractWrapper, MarketplaceContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, MarketplaceV3.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n\n  /** ********************\n   * FEATURE DETECTION\n   * ********************/\n\n  detectDirectListings() {\n    if (detectContractFeature(this.contractWrapper, \"DirectListings\")) {\n      return new MarketplaceV3DirectListings(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectEnglishAuctions() {\n    if (detectContractFeature(this.contractWrapper, \"EnglishAuctions\")) {\n      return new MarketplaceV3EnglishAuctions(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectOffers() {\n    if (detectContractFeature(this.contractWrapper, \"Offers\")) {\n      return new MarketplaceV3Offers(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n}\n\nexport { MarketplaceV3 };\n","import { cw as BigNumberTransformSchema, cx as FileOrBufferOrStringSchema, cy as HexColor, cq as ContractWrapper } from './index-c67c8d87.browser.esm.js';\nimport { z } from 'zod';\nimport { i as isNativeToken } from './fetchCurrencyValue-ca929de6.browser.esm.js';\n\nconst PropertiesInput = /* @__PURE__ */(() => z.object({}).catchall(z.union([BigNumberTransformSchema, z.unknown()])))();\n\n/**\n * @internal\n */\nconst OptionalPropertiesInput = /* @__PURE__ */(() => z.union([z.array(PropertiesInput), PropertiesInput]).optional().nullable())();\n\n/**\n * @internal\n */\nconst BasicNFTInput = /* @__PURE__ */(() => z.object({\n  name: z.union([z.string(), z.number()]).optional().nullable(),\n  description: z.string().nullable().optional().nullable(),\n  image: FileOrBufferOrStringSchema.nullable().optional(),\n  animation_url: FileOrBufferOrStringSchema.optional().nullable()\n}))();\n\n/**\n * @internal\n */\nconst CommonNFTInput = /* @__PURE__ */(() => BasicNFTInput.extend({\n  external_url: FileOrBufferOrStringSchema.nullable().optional(),\n  background_color: HexColor.optional().nullable(),\n  properties: OptionalPropertiesInput,\n  attributes: OptionalPropertiesInput\n}).catchall(z.union([BigNumberTransformSchema, z.unknown()])))();\n\n/**\n * @internal\n */\nconst NFTInputOrUriSchema = /* @__PURE__ */(() => z.union([CommonNFTInput, z.string()]))();\n\n/**\n * @internal\n */\nconst CommonNFTOutput = /* @__PURE__ */(() => CommonNFTInput.extend({\n  id: z.string(),\n  uri: z.string(),\n  image: z.string().nullable().optional(),\n  external_url: z.string().nullable().optional(),\n  animation_url: z.string().nullable().optional()\n}))();\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @internal\n */\nasync function setErc20Allowance(contractToApprove, value, currencyAddress, overrides) {\n  if (isNativeToken(currencyAddress)) {\n    overrides[\"value\"] = value;\n  } else {\n    const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n    const signer = contractToApprove.getSigner();\n    const provider = contractToApprove.getProvider();\n    const erc20 = new ContractWrapper(signer || provider, currencyAddress, ERC20Abi, contractToApprove.options, contractToApprove.storage);\n    const owner = await contractToApprove.getSignerAddress();\n    const spender = contractToApprove.address;\n    const allowance = await erc20.read(\"allowance\", [owner, spender]);\n    if (allowance.lt(value)) {\n      // approve overrides the previous allowance, set it to the minimum required for this tx\n      await erc20.sendTransaction(\"approve\", [spender, value]);\n    }\n    return overrides;\n  }\n}\n\nexport { BasicNFTInput as B, CommonNFTOutput as C, NFTInputOrUriSchema as N, CommonNFTInput as a, setErc20Allowance as s };\n"],"names":["InterfaceId_IERC721","utils","InterfaceId_IERC1155","FALLBACK_METADATA","name","async","fetchTokenMetadata","tokenId","tokenUri","storage","startsWith","Buffer","base64","split","jsonMetadata","JSON","parse","from","toString","CommonNFTOutput","id","BigNumber","uri","parsedUri","replace","toHexString","slice","downloadJSON","err","unparsedTokenIdUri","e","console","warn","concat","stringify","fetchTokenMetadataForContract","contractAddress","provider","ERC165MetadataAbi","default","erc165","Contract","isERC721","isERC1155","Promise","all","supportsInterface","ERC721MetadataAbi","erc721","tokenURI","Error","ERC1155MetadataAbi","erc1155","uploadOrExtractURI","metadata","upload","CommonNFTInput","uploadOrExtractURIs","metadatas","startNumber","options","undefined","find","m","isUriList","isMetadataList","uploadBatch","map","rewriteFileNames","fileStartNumber","onProgress","getBaseUriFromBatch","uris","baseUri","substring","lastIndexOf","i","length","DEFAULT_QUERY_ALL_COUNT","RawDateSchema","z","union","date","transform","Math","floor","getTime","number","StartDateSchema","Date","EndDateSchema","now","assertEnabled","namespace","feature","ExtensionNotImplementedError","ContractInterceptor","constructor","contractWrapper","this","overrideNextTransaction","hook","withTransactionOverride","MarketplaceV3","directListings","detectDirectListings","FEATURE_DIRECT_LISTINGS","englishAuctions","detectEnglishAuctions","FEATURE_ENGLISH_AUCTIONS","offers","detectOffers","FEATURE_OFFERS","chainId","_chainId","network","address","arguments","abi","ContractWrapper","AbiSchema","ContractMetadata","MarketplaceContractSchema","app","ContractAppURI","roles","ContractRoles","contractRoles","encoder","ContractEncoder","estimator","GasCostEstimator","events","ContractEvents","platformFees","ContractPlatformFee","interceptor","onNetworkUpdated","updateSignerOrProvider","getAddress","prepare","method","args","overrides","Transaction","fromContractWrapper","call","functionName","detectContractFeature","MarketplaceV3DirectListings","MarketplaceV3EnglishAuctions","MarketplaceV3Offers","_defineProperty","MARKETPLACE_CONTRACT_ROLES","PropertiesInput","object","catchall","BigNumberTransformSchema","unknown","OptionalPropertiesInput","array","optional","nullable","BasicNFTInput","string","description","image","FileOrBufferOrStringSchema","animation_url","extend","external_url","background_color","HexColor","properties","attributes","NFTInputOrUriSchema","setErc20Allowance","contractToApprove","value","currencyAddress","isNativeToken","ERC20Abi","signer","getSigner","getProvider","erc20","owner","getSignerAddress","spender","read","lt","sendTransaction"],"sourceRoot":""}