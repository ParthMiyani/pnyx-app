{"version":3,"file":"static/js/2975.6c2b87ac.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/contract-interceptor-d7b164a7.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/split-f1d2034e.browser.esm.js"],"sourcesContent":["/**\n * Allows overriding transaction behavior for this contract\n * @internal\n */\nclass ContractInterceptor {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * The next transaction executed will add/replace any overrides passed via the passed in hook.\n   * @remarks Overridden values will be applied to the next transaction executed.\n   * @example\n   * ```javascript\n   * contract.interceptor.overrideNextTransaction(() => ({\n   *   gasLimit: 3000000,\n   * }));\n   * ```\n   * @param hook - the hook to add or replace any CallOverrides (gas limit, gas price, nonce, from, value, etc...)\n   * @public\n   */\n  overrideNextTransaction(hook) {\n    this.contractWrapper.withTransactionOverride(hook);\n  }\n}\n\nexport { ContractInterceptor as C };\n","import { BigNumber, Contract } from 'ethers';\nimport { C as ContractEncoder, a as fetchCurrencyValue } from './fetchCurrencyValue-ca929de6.browser.esm.js';\nimport { dG as ADMIN_ROLE, cq as ContractWrapper, bj as AbiSchema, c5 as SplitsContractSchema, aL as resolveAddress } from './index-c67c8d87.browser.esm.js';\nimport { d as buildTransactionFunction, T as Transaction } from './transactions-d1b63e67.browser.esm.js';\nimport { C as ContractMetadata, b as ContractAppURI, G as GasCostEstimator, a as ContractEvents } from './contract-appuri-8a73f5ec.browser.esm.js';\nimport { C as ContractInterceptor } from './contract-interceptor-d7b164a7.browser.esm.js';\nimport { C as ContractRoles } from './contract-roles-80a71d71.browser.esm.js';\nimport 'zod';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/crypto';\nimport 'tiny-invariant';\nimport 'bn.js';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport 'eventemitter3';\nimport '@thirdweb-dev/storage';\n\n/**\n * Create custom royalty splits to distribute funds.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"split\");\n * ```\n *\n * @public\n */\n// TODO create extension wrappers for this\nclass Split {\n  static contractRoles = ADMIN_ROLE;\n\n  /**\n   * @internal\n   */\n\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    this._chainId = chainId;\n    this.abi = AbiSchema.parse(abi || []);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(this.contractWrapper, SplitsContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Split.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get Recipients of this splits contract\n   *\n   * @remarks Get the data about the shares of every split recipient on the contract\n   *\n   * @example\n   * ```javascript\n   * const recipients = await contract.getAllRecipients();\n   * console.log(recipients);\n   * ```\n   */\n  async getAllRecipients() {\n    const recipients = [];\n    let index = BigNumber.from(0);\n    const totalRecipients = await this.contractWrapper.read(\"payeeCount\", []);\n    while (index.lt(totalRecipients)) {\n      try {\n        const recipientAddress = await this.contractWrapper.read(\"payee\", [index]);\n        recipients.push(await this.getRecipientSplitPercentage(recipientAddress));\n        index = index.add(1);\n      } catch (err) {\n        // The only way we know how to detect that we've found all recipients\n        // is if we get an error when trying to get the next recipient.\n        if (\"method\" in err && err[\"method\"].toLowerCase().includes(\"payee(uint256)\")) {\n          break;\n        } else {\n          throw err;\n        }\n      }\n    }\n    return recipients;\n  }\n\n  /**\n   * Returns all the recipients and their balances in the native currency.\n   *\n   * @returns A map of recipient addresses to their balances in the native currency.\n   */\n  async balanceOfAllRecipients() {\n    const recipients = await this.getAllRecipients();\n    const balances = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOf(recipient.address);\n    }\n    return balances;\n  }\n\n  /**\n   * Returns all the recipients and their balances in a non-native currency.\n   *\n   * @param tokenAddress - The address of the currency to check the balances in.\n   * @returns A map of recipient addresses to their balances in the specified currency.\n   */\n  async balanceOfTokenAllRecipients(tokenAddress) {\n    const [resolvedToken, recipients] = await Promise.all([resolveAddress(tokenAddress), this.getAllRecipients()]);\n    const balances = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOfToken(recipient.address, resolvedToken);\n    }\n    return balances;\n  }\n\n  /**\n   * Get Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the native currency held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * const funds = await contract.balanceOf(address);\n   * console.log(funds);\n   * ```\n   */\n  async balanceOf(address) {\n    const [resolvedAddress, walletBalance, totalReleased] = await Promise.all([resolveAddress(address), this.contractWrapper.getProvider().getBalance(this.getAddress()), this.contractWrapper.read(\"totalReleased\", [])]);\n    const totalReceived = walletBalance.add(totalReleased);\n    return this._pendingPayment(resolvedAddress, totalReceived, await this.contractWrapper.read(\"released\", [resolvedAddress]));\n  }\n\n  /**\n   * Get non-native Token Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the non-native tokens held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * // The address of the currency to check the contracts funds of\n   * const tokenAddress = \"0x...\"\n   * const funds = await contract.balanceOfToken(address, tokenAddress);\n   * console.log(funds);\n   * ```\n   */\n  async balanceOfToken(walletAddress, tokenAddress) {\n    const [resolvedToken, resolvedWallet] = await Promise.all([resolveAddress(tokenAddress), resolveAddress(walletAddress)]);\n    const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n    const erc20 = new Contract(resolvedToken, ERC20Abi, this.contractWrapper.getProvider());\n    const [walletBalance, totalReleased, alreadyReleased] = await Promise.all([erc20.balanceOf(this.getAddress()), this.contractWrapper.read(\"totalReleased\", [resolvedToken]), this.contractWrapper.read(\"released\", [resolvedToken, resolvedWallet])]);\n    const totalReceived = walletBalance.add(totalReleased);\n    const value = await this._pendingPayment(resolvedWallet, totalReceived, alreadyReleased);\n    return await fetchCurrencyValue(this.contractWrapper.getProvider(), resolvedToken, value);\n  }\n\n  /**\n   * Get the % of funds owed to a given address\n   * @param address - the address to check percentage of\n   */\n  async getRecipientSplitPercentage(address) {\n    const [resolvedAddress, totalShares, walletsShares] = await Promise.all([resolveAddress(address), this.contractWrapper.read(\"totalShares\", []), this.contractWrapper.read(\"shares\", [address])]);\n    // We convert to basis points to avoid floating point loss of precision\n    return {\n      address: resolvedAddress,\n      splitPercentage: walletsShares.mul(BigNumber.from(1e7)).div(totalShares).toNumber() / 1e5\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Withdraw Funds\n   * @remarks Triggers a transfer to account of the amount of native currency they are owed.\n   *\n   * @example\n   * ```javascript\n   * // the wallet address that wants to withdraw their funds\n   * const walletAddress = \"{{wallet_address}}\"\n   * await contract.withdraw(walletAddress);\n   * ```\n   *\n   * @param walletAddress - The address to distributes the amount to\n   */\n  withdraw = /* @__PURE__ */buildTransactionFunction(async walletAddress => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"release(address)\",\n      args: [await resolveAddress(walletAddress)]\n    });\n  });\n\n  /**\n   * Triggers a transfer to account of the amount of a given currency they are owed.\n   *\n   * @param walletAddress - The address to distributes the amount to\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n  withdrawToken = /* @__PURE__ */buildTransactionFunction(async (walletAddress, tokenAddress) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"release(address,address)\",\n      args: await Promise.all([resolveAddress(tokenAddress), resolveAddress(walletAddress)])\n    });\n  });\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * await contract.distribute();\n   * ```\n   */\n  distribute = /* @__PURE__ */buildTransactionFunction(async () => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"distribute()\",\n      args: []\n    });\n  });\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * // The address of the currency to distribute funds\n   * const tokenAddress = \"0x...\"\n   * await contract.distributeToken(tokenAddress);\n   * ```\n   *\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n  distributeToken = /* @__PURE__ */buildTransactionFunction(async tokenAddress => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"distribute(address)\",\n      args: [await resolveAddress(tokenAddress)]\n    });\n  });\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async _pendingPayment(address, totalReceived, alreadyReleased) {\n    const [resolvedAddress, totalShares] = await Promise.all([resolveAddress(address), this.contractWrapper.read(\"totalShares\", [])]);\n    const addressReceived = totalReceived.mul(await this.contractWrapper.read(\"shares\", [resolvedAddress]));\n    const totalRoyaltyAvailable = addressReceived.div(totalShares);\n    return totalRoyaltyAvailable.sub(alreadyReleased);\n  }\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { Split };\n"],"names":["ContractInterceptor","constructor","contractWrapper","this","overrideNextTransaction","hook","withTransactionOverride","Split","chainId","_chainId","network","address","storage","_defineProperty","buildTransactionFunction","async","Transaction","fromContractWrapper","method","args","resolveAddress","walletAddress","tokenAddress","Promise","all","options","arguments","length","undefined","abi","ContractWrapper","AbiSchema","parse","metadata","ContractMetadata","SplitsContractSchema","app","ContractAppURI","roles","ContractRoles","contractRoles","encoder","ContractEncoder","estimator","GasCostEstimator","events","ContractEvents","interceptor","onNetworkUpdated","updateSignerOrProvider","getAddress","getAllRecipients","recipients","index","BigNumber","from","totalRecipients","read","lt","recipientAddress","push","getRecipientSplitPercentage","add","err","toLowerCase","includes","balanceOfAllRecipients","balances","recipient","balanceOf","balanceOfTokenAllRecipients","resolvedToken","balanceOfToken","resolvedAddress","walletBalance","totalReleased","getProvider","getBalance","totalReceived","_pendingPayment","resolvedWallet","ERC20Abi","default","erc20","Contract","alreadyReleased","value","fetchCurrencyValue","totalShares","walletsShares","splitPercentage","mul","div","toNumber","sub","prepare","overrides","call","functionName","ADMIN_ROLE"],"sourceRoot":""}