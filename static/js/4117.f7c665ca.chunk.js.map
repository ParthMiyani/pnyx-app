{"version":3,"file":"static/js/4117.f7c665ca.chunk.js","mappings":"kHAIA,MAAMA,EACJC,WAAAA,CAAYC,GACVC,KAAKD,gBAAkBA,CACzB,CAcAE,uBAAAA,CAAwBC,GACtBF,KAAKD,gBAAgBI,wBAAwBD,EAC/C,E,wECNF,MAAME,EAEJN,WAAAA,CAAYC,IAAiBM,EAAAA,EAAAA,GAAA,mBADfC,EAAAA,GAAqBC,OAwBnCF,EAAAA,EAAAA,GAAA,YAcqBG,EAAAA,EAAAA,IAAyBC,UAC5C,MAAMC,QAAeC,EAAAA,GAAwBC,WAAWC,GACxD,OAAOC,EAAAA,EAAYC,oBAAoB,CACrChB,gBAAiBC,KAAKD,gBACtBiB,OAAQ,qBACRC,KAAM,CAACP,EAAOQ,uBAAwBR,EAAOS,4BAC7C,KA1CFnB,KAAKD,gBAAkBA,CACzB,CAaA,SAAMqB,GACJ,MAAOC,EAAsBC,SAAwBtB,KAAKD,gBAAgBwB,KAAK,qBAAsB,IACrG,OAAOZ,EAAAA,GAAwBC,WAAW,CACxCM,uBAAwBG,EACxBF,0BAA2BG,GAE/B,E,wEC1BF,MAAME,EAEJ1B,WAAAA,CAAYC,IAAiBM,EAAAA,EAAAA,GAAA,mBADfoB,EAAAA,GAAqBlB,OAoBnCF,EAAAA,EAAAA,GAAA,qBAU8BG,EAAAA,EAAAA,IAAyBC,SAC9CK,EAAAA,EAAYC,oBAAoB,CACrChB,gBAAiBC,KAAKD,gBACtBiB,OAAQ,0BACRC,KAAM,CAACS,QAhCT1B,KAAKD,gBAAkBA,CACzB,CAYA,kBAAM4B,GAEJ,aADqB3B,KAAKD,gBAAgBwB,KAAK,uBAAwB,GAEzE,E,wECpBF,MAAMK,EACJ,WAAIC,GACF,OAAO7B,KAAK8B,QACd,CACAhC,WAAAA,CAAYC,EAAiBgC,EAASF,IA8HtCxB,EAAAA,EAAAA,GAAA,iBAc0BG,EAAAA,EAAAA,IAAyBC,MAAOuB,EAAIC,IACrDjC,KAAKkC,MAAMC,SAASC,QAAQJ,EAAIC,OAGzC5B,EAAAA,EAAAA,GAAA,qBAiB8BG,EAAAA,EAAAA,IAAyBC,MAAO4B,EAAML,EAAIC,IAC/DjC,KAAKkC,MAAMI,aAAaF,QAAQC,EAAML,EAAIC,OAGnD5B,EAAAA,EAAAA,GAAA,qBAY8BG,EAAAA,EAAAA,IAAyBC,MAAO8B,EAASN,IAC9DjC,KAAKkC,MAAMM,aAAaJ,QAAQG,EAASN,OAGlD5B,EAAAA,EAAAA,GAAA,sBAsB+BG,EAAAA,EAAAA,IAAyBC,SAC/CT,KAAKkC,MAAMO,cAAcL,QAAQnB,MA3MxCjB,KAAKD,gBAAkBA,EACvBC,KAAK+B,QAAUA,EACf/B,KAAKkC,MAAQ,IAAIQ,EAAAA,EAAM1C,KAAKD,gBAAiBC,KAAK+B,QAASF,GAC3D7B,KAAK8B,SAAWD,CAClB,CAKAc,gBAAAA,CAAiBC,GACf5C,KAAKD,gBAAgB8C,uBAAuBD,EAC9C,CAKAE,UAAAA,GACE,OAAO9C,KAAKD,gBAAgBgD,OAC9B,CAeA,SAAM3B,GACJ,OAAOpB,KAAKkC,MAAMd,KACpB,CAcA,aAAM4B,GACJ,aAAahD,KAAKkC,MAAMc,SAC1B,CAgBA,eAAMC,CAAUF,GACd,OAAO/C,KAAKkC,MAAMe,UAAUF,EAC9B,CAUA,iBAAMG,GACJ,aAAalD,KAAKkC,MAAMgB,aAC1B,CAgBA,eAAMC,CAAUZ,GACd,aAAavC,KAAKkC,MAAMiB,UAAUZ,EACpC,CAkBA,iBAAMa,CAAYC,EAAOd,GACvB,aAAavC,KAAKkC,MAAMkB,YAAYC,EAAOd,EAC7C,E,8NCjCF,MAAMe,UAAkB1B,EAAAA,EA8BtB9B,WAAAA,CAAY8C,EAASG,EAAShB,GAC5B,IAAIwB,EAAUC,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,CAAC,EAC/EG,EAAMH,UAAUC,OAAS,EAAID,UAAU,QAAKE,EAC5C7B,EAAU2B,UAAUC,OAAS,EAAID,UAAU,QAAKE,EAEpDE,MADsBJ,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,IAAIK,EAAAA,GAAgBjB,EAASG,EAASY,EAAKJ,EAASxB,GACvHA,EAASF,IA4DlCxB,EAAAA,EAAAA,GAAA,cAMuBG,EAAAA,EAAAA,GAAyB,MAC9C,IAAIsD,EAAQ9D,KACZ,OAAOS,eAAgBwB,GACrB,IAAI8B,IAAsBP,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,KAAmBA,UAAU,GACzF,OAAOM,EAAME,QAAQ5B,cAAc0B,EAAM/D,gBAAgBkE,mBAAoBhC,EAAQ8B,EACvF,CACD,EAN+C,MAQhD1D,EAAAA,EAAAA,GAAA,gBAoByBG,EAAAA,EAAAA,GAAyB,MAChD,IAAI0D,EAASlE,KACb,OAAOS,eAAgB0D,EAAoBlC,GACzC,IAAI8B,IAAsBP,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,KAAmBA,UAAU,GACzF,OAAOU,EAAOhC,MAAM8B,QAAQ5B,QAAQ+B,EAAoBlC,EAAQ,CAC9D8B,uBAEJ,CACD,EARiD,MAUlD1D,EAAAA,EAAAA,GAAA,mBAM4BG,EAAAA,EAAAA,IAAyBC,SAC5CK,EAAAA,EAAYC,oBAAoB,CACrChB,gBAAiBC,KAAKD,gBACtBiB,OAAQ,WACRC,KAAM,OAAOmD,EAAAA,EAAAA,IAAeC,UAIhChE,EAAAA,EAAAA,GAAA,mBAa4BG,EAAAA,EAAAA,IAAyBC,SAC5CT,KAAKkC,MAAMoC,KAAKlC,QAAQH,OAEjC5B,EAAAA,EAAAA,GAAA,iBAgB0BG,EAAAA,EAAAA,IAAyBC,MAAO8D,EAAQtC,IACzDjC,KAAKkC,MAAMsC,SAASpC,QAAQmC,EAAQtC,MAtJ3CjC,KAAK2D,IAAMc,EAAAA,GAAUC,MAAMf,GAAO,IAClC3D,KAAK2E,SAAW,IAAIC,EAAAA,EAAiB5E,KAAKD,gBAAiB8E,EAAAA,GAAyB7E,KAAK+B,SACzF/B,KAAK8E,IAAM,IAAIC,EAAAA,EAAe/E,KAAKD,gBAAiBC,KAAK2E,SAAU3E,KAAK+B,SACxE/B,KAAKgF,MAAQ,IAAIC,EAAAA,EAAcjF,KAAKD,gBAAiBuD,EAAU4B,eAC/DlF,KAAKmF,QAAU,IAAIC,EAAAA,EAAgBpF,KAAKD,iBACxCC,KAAKqF,UAAY,IAAIC,EAAAA,EAAiBtF,KAAKD,iBAC3CC,KAAKuF,OAAS,IAAIC,EAAAA,EAAexF,KAAKD,iBACtCC,KAAKyF,MAAQ,IAAIjE,EAAAA,EAAoBxB,KAAKD,iBAC1CC,KAAK0F,aAAe,IAAItF,EAAAA,EAAoBJ,KAAKD,iBACjDC,KAAK2F,YAAc,IAAI9F,EAAAA,EAAoBG,KAAKD,iBAChDC,KAAK4F,gBAAkB,IAAIC,EAAAA,EAAoB7F,KAAKD,gBAAiBC,KAAK2E,SAAU3E,KAAK+B,QAC3F,CAWA,oBAAM+D,GACJ,aAAa9F,KAAK+F,uBAAuB/F,KAAKD,gBAAgBkE,mBAChE,CACA,sBAAM8B,CAAiBC,GACrB,aAAahG,KAAKkC,MAAM+D,eAAejG,KAAKD,gBAAgBwB,KAAK,WAAY,OAAO6C,EAAAA,EAAAA,IAAe4B,KACrG,CAOA,mBAAME,GACJ,aAAalG,KAAKmG,sBAAsBnG,KAAKD,gBAAgBkE,mBAC/D,CAOA,qBAAMkC,CAAgBH,GACpB,aAAahG,KAAKD,gBAAgBwB,KAAK,YAAa,OAAO6C,EAAAA,EAAAA,IAAe4B,IAC5E,CAKA,0BAAMI,GAEJ,aADgCpG,KAAKD,gBAAgBwB,KAAK,UAAW,EAAC8E,EAAAA,EAAAA,GAAY,YAAaC,EAAAA,GAEjG,CAuGA,aAAMlE,CAAQpB,EAAQC,EAAMsF,GAC1B,OAAOzF,EAAAA,EAAYC,oBAAoB,CACrChB,gBAAiBC,KAAKD,gBACtBiB,SACAC,OACAsF,aAEJ,CAKA,UAAMC,CAAKC,EAAcxF,EAAMsF,GAC7B,OAAOvG,KAAKD,gBAAgByG,KAAKC,EAAcxF,EAAMsF,EACvD,GACDlG,EAAAA,EAAAA,GA/MKiD,EAAS,gBACUoD,EAAAA,G","sources":["../node_modules/@thirdweb-dev/sdk/dist/contract-interceptor-d7b164a7.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/contract-platform-fee-9cd02358.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/contract-sales-a0170d05.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/erc-20-standard-70302c4a.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/token-drop-82e6d649.browser.esm.js"],"sourcesContent":["/**\n * Allows overriding transaction behavior for this contract\n * @internal\n */\nclass ContractInterceptor {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * The next transaction executed will add/replace any overrides passed via the passed in hook.\n   * @remarks Overridden values will be applied to the next transaction executed.\n   * @example\n   * ```javascript\n   * contract.interceptor.overrideNextTransaction(() => ({\n   *   gasLimit: 3000000,\n   * }));\n   * ```\n   * @param hook - the hook to add or replace any CallOverrides (gas limit, gas price, nonce, from, value, etc...)\n   * @public\n   */\n  overrideNextTransaction(hook) {\n    this.contractWrapper.withTransactionOverride(hook);\n  }\n}\n\nexport { ContractInterceptor as C };\n","import { d as buildTransactionFunction, T as Transaction } from './transactions-d1b63e67.browser.esm.js';\nimport { dp as FEATURE_PLATFORM_FEE, bF as CommonPlatformFeeSchema } from './index-c67c8d87.browser.esm.js';\n\n/**\n * Handle platform fees and recipients\n * @remarks Configure platform fees for a contract, which can be applied on certain paid transactions\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const feeInfo = await contract.platformFees.get();\n * await contract.platformFees.set({\n *   platform_fee_basis_points: 100, // 1% fee\n *   platform_fee_recipient: \"0x...\" // the fee recipient\n * })\n * ```\n * @public\n */\nclass ContractPlatformFee {\n  featureName = FEATURE_PLATFORM_FEE.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the platform fee recipient and basis points\n   *\n   * @example\n   * ```javascript\n   * const feeInfo = await contract.platformFees.get();\n   * console.log(feeInfo.platform_fee_recipient);\n   * console.log(feeInfo.platform_fee_basis_points);\n   * ```\n   * @twfeature PlatformFee\n   */\n  async get() {\n    const [platformFeeRecipient, platformFeeBps] = await this.contractWrapper.read(\"getPlatformFeeInfo\", []);\n    return CommonPlatformFeeSchema.parseAsync({\n      platform_fee_recipient: platformFeeRecipient,\n      platform_fee_basis_points: platformFeeBps\n    });\n  }\n\n  /**\n   * Set the platform fee recipient and basis points\n   *\n   * @example\n   * ```javascript\n   * await contract.platformFees.set({\n   *   platform_fee_basis_points: 100, // 1% fee\n   *   platform_fee_recipient: \"0x...\" // the fee recipient\n   * })\n   * ```\n   *\n   * @param platformFeeInfo - the platform fee information\n   * @twfeature PlatformFee\n   */\n  set = /* @__PURE__ */buildTransactionFunction(async platformFeeInfo => {\n    const parsed = await CommonPlatformFeeSchema.parseAsync(platformFeeInfo);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setPlatformFeeInfo\",\n      args: [parsed.platform_fee_recipient, parsed.platform_fee_basis_points]\n    });\n  });\n}\n\nexport { ContractPlatformFee as C };\n","import { d as buildTransactionFunction, T as Transaction } from './transactions-d1b63e67.browser.esm.js';\nimport { d3 as FEATURE_PRIMARY_SALE } from './index-c67c8d87.browser.esm.js';\n\n/**\n * Handle primary sales recipients\n * @remarks Configure primary sale recipients for an entire contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const salesRecipient = await contract.sales.getRecipient();\n * await contract.sales.setRecipient(recipientWalletAddress);\n * ```\n * @public\n */\nclass ContractPrimarySale {\n  featureName = FEATURE_PRIMARY_SALE.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the primary sale recipient\n   * @returns The wallet address.\n   * @example\n   * ```javascript\n   * const salesRecipient = await contract.sales.getRecipient();\n   * ```\n   * @public\n   * @twfeature PrimarySale\n   */\n  async getRecipient() {\n    const result = await this.contractWrapper.read(\"primarySaleRecipient\", []);\n    return result;\n  }\n\n  /**\n   * Set the primary sale recipient\n   * @param recipient - the wallet address\n   * @example\n   * ```javascript\n   * await contract.sales.setRecipient(recipientWalletAddress);\n   * ```\n   * @public\n   * @twfeature PrimarySale\n   */\n  setRecipient = /* @__PURE__ */buildTransactionFunction(async recipient => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setPrimarySaleRecipient\",\n      args: [recipient]\n    });\n  });\n}\n\nexport { ContractPrimarySale as C };\n","import { d as buildTransactionFunction } from './transactions-d1b63e67.browser.esm.js';\nimport { E as Erc20 } from './erc-20-8afda24d.browser.esm.js';\n\n/**\n * Standard ERC20 Token functions\n * @remarks Basic functionality for a ERC20 contract that handles all unit transformation for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.token.transfer(walletAddress, amount);\n * ```\n * @public\n */\nclass StandardErc20 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc20 = new Erc20(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  /**\n   * @internal\n   */\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the token Metadata (name, symbol, etc...)\n   *\n   * @example\n   * ```javascript\n   * const token = await contract.get();\n   * ```\n   * @returns The token metadata\n   */\n  async get() {\n    return this.erc20.get();\n  }\n\n  /**\n   * Get Token Balance for the currently connected wallet\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * const balance = await contract.balance();\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   */\n  async balance() {\n    return await this.erc20.balance();\n  }\n\n  /**\n   * Get Token Balance\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check token balance\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.balanceOf(walletAddress);\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   */\n  async balanceOf(address) {\n    return this.erc20.balanceOf(address);\n  }\n\n  /**\n   * The total supply for this token\n   * @remarks Get how much supply has been minted\n   * @example\n   * ```javascript\n   * const balance = await contract.totalSupply();\n   * ```\n   */\n  async totalSupply() {\n    return await this.erc20.totalSupply();\n  }\n\n  /**\n   * Get Token Allowance\n   *\n   * @remarks Get the allowance of a 'spender' wallet over the connected wallet's funds - the allowance of a different address for a token is the amount of tokens that the `spender` wallet is allowed to spend on behalf of the connected wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check token allowance\n   * const spenderAddress = \"0x...\";\n   * const allowance = await contract.allowance(spenderAddress);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   */\n  async allowance(spender) {\n    return await this.erc20.allowance(spender);\n  }\n\n  /**\n   * Get Token Allowance\n   *\n   * @remarks Get the allowance of one wallet over another wallet's funds - the allowance of a different address for a token is the amount of tokens that the wallet is allowed to spend on behalf of the specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet who owns the funds\n   * const owner = \"{{wallet_address}}\";\n   * // Address of the wallet to check token allowance\n   * const spender = \"0x...\";\n   * const allowance = await contract.allowanceOf(owner, spender);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   */\n  async allowanceOf(owner, spender) {\n    return await this.erc20.allowanceOf(owner, spender);\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Transfer Tokens\n   *\n   * @remarks Transfer tokens from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the tokens to\n   * const toAddress = \"0x...\";\n   * // The amount of tokens you want to send\n   * const amount = 0.1;\n   * await contract.transfer(toAddress, amount);\n   * ```\n   */\n  transfer = /* @__PURE__ */buildTransactionFunction(async (to, amount) => {\n    return this.erc20.transfer.prepare(to, amount);\n  });\n\n  /**\n   * Transfer Tokens From Address\n   *\n   * @remarks Transfer tokens from one wallet to another\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const fromAddress = \"{{wallet_address}}\";\n   * // Address of the wallet you want to send the tokens to\n   * const toAddress = \"0x...\";\n   * // The number of tokens you want to send\n   * const amount = 1.2\n   * // Note that the connected wallet must have approval to transfer the tokens of the fromAddress\n   * await contract.transferFrom(fromAddress, toAddress, amount);\n   * ```\n   */\n  transferFrom = /* @__PURE__ */buildTransactionFunction(async (from, to, amount) => {\n    return this.erc20.transferFrom.prepare(from, to, amount);\n  });\n\n  /**\n   * Allows the specified `spender` wallet to transfer the given `amount` of tokens to another wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to allow transfers from\n   * const spenderAddress = \"0x...\";\n   * // The number of tokens to give as allowance\n   * const amount = 100\n   * await contract.setAllowance(spenderAddress, amount);\n   * ```\n   */\n  setAllowance = /* @__PURE__ */buildTransactionFunction(async (spender, amount) => {\n    return this.erc20.setAllowance.prepare(spender, amount);\n  });\n\n  /**\n   * Transfer Tokens To Many Wallets\n   *\n   * @remarks Mint tokens from the connected wallet to many wallets\n   *\n   * @example\n   * ```javascript\n   * // Data of the tokens you want to mint\n   * const data = [\n   *   {\n   *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n   *     amount: 100, // How many tokens to mint to specified address\n   *   },\n   *  {\n   *    toAddress: \"0x...\",\n   *    amount: 100,\n   *  }\n   * ]\n   *\n   * await contract.transferBatch(data);\n   * ```\n   */\n  transferBatch = /* @__PURE__ */buildTransactionFunction(async args => {\n    return this.erc20.transferBatch.prepare(args);\n  });\n}\n\nexport { StandardErc20 as S };\n","import { constants } from 'ethers';\nimport { dH as TOKEN_DROP_CONTRACT_ROLES, cq as ContractWrapper, bj as AbiSchema, dI as DropErc20ContractSchema, aL as resolveAddress, H as getRoleHash } from './index-c67c8d87.browser.esm.js';\nimport { d as buildTransactionFunction, T as Transaction } from './transactions-d1b63e67.browser.esm.js';\nimport { C as ContractMetadata, b as ContractAppURI, G as GasCostEstimator, a as ContractEvents } from './contract-appuri-8a73f5ec.browser.esm.js';\nimport { C as ContractEncoder } from './fetchCurrencyValue-ca929de6.browser.esm.js';\nimport { C as ContractInterceptor } from './contract-interceptor-d7b164a7.browser.esm.js';\nimport { C as ContractPlatformFee } from './contract-platform-fee-9cd02358.browser.esm.js';\nimport { C as ContractRoles } from './contract-roles-80a71d71.browser.esm.js';\nimport { C as ContractPrimarySale } from './contract-sales-a0170d05.browser.esm.js';\nimport { D as DropClaimConditions } from './drop-claim-conditions-03410598.browser.esm.js';\nimport { S as StandardErc20 } from './erc-20-standard-70302c4a.browser.esm.js';\nimport 'zod';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/crypto';\nimport 'tiny-invariant';\nimport 'bn.js';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport 'eventemitter3';\nimport '@thirdweb-dev/storage';\nimport 'fast-deep-equal';\nimport './signature-74888765.browser.esm.js';\nimport './normalizePriceValue-2bd5325b.browser.esm.js';\nimport '@thirdweb-dev/merkletree';\nimport './assertEnabled-51677c66.browser.esm.js';\nimport './setErc20Allowance-4ec0c078.browser.esm.js';\nimport 'uuid';\nimport './erc-20-8afda24d.browser.esm.js';\n\n/**\n * Create a Drop contract for a standard crypto token or cryptocurrency.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"token-drop\");\n * ```\n * @internal\n * @deprecated use contract.erc20 instead\n */\nclass TokenDrop extends StandardErc20 {\n  static contractRoles = TOKEN_DROP_CONTRACT_ROLES;\n\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim Tokens, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 3117.42, // limit how many tokens are released in this presale\n   *     price: 0.001, // presale price per token\n   *     snapshot: ['0x...', '0x...'], // limit claiming to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.008, // public sale price per token\n   *   }\n   * ]);\n   * await contract.claimConditions.set(claimConditions);\n   * ```\n   */\n\n  /**\n   * @internal\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = AbiSchema.parse(abi || []);\n    this.metadata = new ContractMetadata(this.contractWrapper, DropErc20ContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, TokenDrop.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.claimConditions = new DropClaimConditions(this.contractWrapper, this.metadata, this.storage);\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get your wallet voting power for the current checkpoints\n   *\n   * @returns The amount of voting power in tokens\n   */\n  async getVoteBalance() {\n    return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress());\n  }\n  async getVoteBalanceOf(account) {\n    return await this.erc20.getValue(await this.contractWrapper.read(\"getVotes\", [await resolveAddress(account)]));\n  }\n\n  /**\n   * Get your voting delegatee address\n   *\n   * @returns The address of your vote delegatee\n   */\n  async getDelegation() {\n    return await this.getDelegationOf(await this.contractWrapper.getSignerAddress());\n  }\n\n  /**\n   * Get a specific address voting delegatee address\n   *\n   * @returns The address of your vote delegatee\n   */\n  async getDelegationOf(account) {\n    return await this.contractWrapper.read(\"delegates\", [await resolveAddress(account)]);\n  }\n\n  /**\n   * Get whether users can transfer tokens from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.read(\"hasRole\", [getRoleHash(\"transfer\"), constants.AddressZero]);\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Claim a certain amount of tokens\n   * @remarks See {@link TokenDrop.claimTo}\n   * @param amount - the amount of tokens to mint\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   */\n  claim = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (amount) {\n      let checkERC20Allowance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return _this.claimTo.prepare(await _this.contractWrapper.getSignerAddress(), amount, checkERC20Allowance);\n    };\n  })());\n\n  /**\n   * Claim a certain amount of tokens to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim Tokens.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 42.69; // how many tokens you want to claim\n   *\n   * const tx = await contract.claimTo(address, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param amount - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   *\n   * @returns  The transaction receipt\n   */\n  claimTo = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this2 = this;\n    return async function (destinationAddress, amount) {\n      let checkERC20Allowance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      return _this2.erc20.claimTo.prepare(destinationAddress, amount, {\n        checkERC20Allowance\n      });\n    };\n  })());\n\n  /**\n   * Lets you delegate your voting power to the delegateeAddress\n   *\n   * @param delegateeAddress - delegatee wallet address\n   * @alpha\n   */\n  delegateTo = /* @__PURE__ */buildTransactionFunction(async delegateeAddress => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"delegate\",\n      args: [await resolveAddress(delegateeAddress)]\n    });\n  });\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.burnTokens(amount);\n   * ```\n   */\n  burnTokens = /* @__PURE__ */buildTransactionFunction(async amount => {\n    return this.erc20.burn.prepare(amount);\n  });\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the specified wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const holderAddress = \"{{wallet_address}}\";\n   *\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.burnFrom(holderAddress, amount);\n   * ```\n   */\n  burnFrom = /* @__PURE__ */buildTransactionFunction(async (holder, amount) => {\n    return this.erc20.burnFrom.prepare(holder, amount);\n  });\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { TokenDrop };\n"],"names":["ContractInterceptor","constructor","contractWrapper","this","overrideNextTransaction","hook","withTransactionOverride","ContractPlatformFee","_defineProperty","FEATURE_PLATFORM_FEE","name","buildTransactionFunction","async","parsed","CommonPlatformFeeSchema","parseAsync","platformFeeInfo","Transaction","fromContractWrapper","method","args","platform_fee_recipient","platform_fee_basis_points","get","platformFeeRecipient","platformFeeBps","read","ContractPrimarySale","FEATURE_PRIMARY_SALE","recipient","getRecipient","StandardErc20","chainId","_chainId","storage","to","amount","erc20","transfer","prepare","from","transferFrom","spender","setAllowance","transferBatch","Erc20","onNetworkUpdated","network","updateSignerOrProvider","getAddress","address","balance","balanceOf","totalSupply","allowance","allowanceOf","owner","TokenDrop","options","arguments","length","undefined","abi","super","ContractWrapper","_this","checkERC20Allowance","claimTo","getSignerAddress","_this2","destinationAddress","resolveAddress","delegateeAddress","burn","holder","burnFrom","AbiSchema","parse","metadata","ContractMetadata","DropErc20ContractSchema","app","ContractAppURI","roles","ContractRoles","contractRoles","encoder","ContractEncoder","estimator","GasCostEstimator","events","ContractEvents","sales","platformFees","interceptor","claimConditions","DropClaimConditions","getVoteBalance","getVoteBalanceOf","account","getValue","getDelegation","getDelegationOf","isTransferRestricted","getRoleHash","constants","overrides","call","functionName","TOKEN_DROP_CONTRACT_ROLES"],"sourceRoot":""}