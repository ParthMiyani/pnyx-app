{"version":3,"file":"static/js/8375.bca01451.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/wallets/dist/url-a45219bd.browser.esm.js","../node_modules/@thirdweb-dev/wallets/evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.browser.esm.js"],"sourcesContent":["import { getValidChainRPCs } from '@thirdweb-dev/chains';\n\nfunction isTwUrl(url) {\n  const host = new URL(url).hostname;\n  return host.endsWith(\".thirdweb.com\") || host.endsWith(\".thirdweb-dev.com\") || host === \"localhost\" || host === \"0.0.0.0\";\n}\nfunction getValidPublicRPCUrl(chain) {\n  return getValidChainRPCs(chain).map(rpc => {\n    try {\n      const url = new URL(rpc);\n      // remove client id from url\n      if (url.hostname.endsWith(\".thirdweb.com\")) {\n        url.pathname = \"\";\n        url.search = \"\";\n      }\n      return url.toString();\n    } catch (e) {\n      return rpc;\n    }\n  });\n}\n\nexport { getValidPublicRPCUrl as g, isTwUrl as i };\n","import { C as Connector } from '../../../../dist/connector-05689d68.browser.esm.js';\nimport { utils, BigNumber, providers, Signer, ethers, constants } from 'ethers';\nimport { i as isTwUrl } from '../../../../dist/url-a45219bd.browser.esm.js';\nimport { s as setAnalyticsHeaders } from '../../../../dist/headers-f975972b.browser.esm.js';\nimport { EntryPoint__factory } from '@account-abstraction/contracts';\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-d7c057bf.browser.esm.js';\nimport { A as ACCOUNT_CORE_ABI, E as ENTRYPOINT_ADDRESS } from '../../../../dist/constants-5a6f7f26.browser.esm.js';\nimport { getDynamicFeeData, ThirdwebSDK, LOCAL_NODE_PKEY, getChainProvider, getGasPrice } from '@thirdweb-dev/sdk';\nimport { Celo, CeloAlfajoresTestnet, CeloBaklavaTestnet } from '@thirdweb-dev/chains';\nimport 'eventemitter3';\n\nasync function hexlifyUserOp(op) {\n  const userOp = await utils.resolveProperties(op);\n  return Object.keys(userOp).map(key => {\n    let val = userOp[key];\n    if (typeof val !== \"string\" || !val.startsWith(\"0x\")) {\n      val = utils.hexValue(val);\n    }\n    return [key, val];\n  }).reduce((set, _ref) => {\n    let [k, v] = _ref;\n    return {\n      ...set,\n      [k]: v\n    };\n  }, {});\n}\n\n// v0.6 userOpHash calculation\nasync function getUserOpHashV06(userOp, entryPoint, chainId) {\n  const op = await utils.resolveProperties(userOp);\n  const hashedUserOp = {\n    sender: op.sender,\n    nonce: op.nonce,\n    initCodeHash: utils.keccak256(op.initCode),\n    callDataHash: utils.keccak256(op.callData),\n    callGasLimit: op.callGasLimit,\n    verificationGasLimit: op.verificationGasLimit,\n    preVerificationGas: op.preVerificationGas,\n    maxFeePerGas: op.maxFeePerGas,\n    maxPriorityFeePerGas: op.maxPriorityFeePerGas,\n    paymasterAndDataHash: utils.keccak256(op.paymasterAndData)\n  };\n  const userOpType = {\n    components: [{\n      type: \"address\",\n      name: \"sender\"\n    }, {\n      type: \"uint256\",\n      name: \"nonce\"\n    }, {\n      type: \"bytes32\",\n      name: \"initCodeHash\"\n    }, {\n      type: \"bytes32\",\n      name: \"callDataHash\"\n    }, {\n      type: \"uint256\",\n      name: \"callGasLimit\"\n    }, {\n      type: \"uint256\",\n      name: \"verificationGasLimit\"\n    }, {\n      type: \"uint256\",\n      name: \"preVerificationGas\"\n    }, {\n      type: \"uint256\",\n      name: \"maxFeePerGas\"\n    }, {\n      type: \"uint256\",\n      name: \"maxPriorityFeePerGas\"\n    }, {\n      type: \"bytes32\",\n      name: \"paymasterAndDataHash\"\n    }],\n    name: \"hashedUserOp\",\n    type: \"tuple\"\n  };\n  const encoded = utils.defaultAbiCoder.encode([userOpType], [{\n    ...hashedUserOp\n  }]);\n  // remove leading word (total length) and trailing word (zero-length signature)\n\n  const userOpHash = utils.keccak256(encoded);\n  const enc = utils.defaultAbiCoder.encode([\"bytes32\", \"address\", \"uint256\"], [userOpHash, entryPoint, chainId]);\n  return utils.keccak256(enc);\n}\nconst generateRandomUint192 = () => {\n  const rand1 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand2 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand3 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand4 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand5 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand6 = BigInt(Math.floor(Math.random() * 0x100000000));\n  return rand1 << BigInt(160) | rand2 << BigInt(128) | rand3 << BigInt(96) | rand4 << BigInt(64) | rand5 << BigInt(32) | rand6;\n};\nconst randomNonce = () => {\n  let hexString = generateRandomUint192().toString(16);\n  if (hexString.length % 2 !== 0) {\n    hexString = \"0\" + hexString;\n  }\n  hexString = \"0x\" + hexString;\n  return BigNumber.from(utils.concat([hexString, \"0x0000000000000000\"]));\n};\n\n/**\n * an API to external a UserOperation with paymaster info\n */\nclass PaymasterAPI {}\n\nconst DEBUG = false; // TODO set as public flag\n\nclass HttpRpcClient {\n  constructor(bundlerUrl, entryPointAddress, chainId, clientId, secretKey) {\n    this.bundlerUrl = bundlerUrl;\n    this.entryPointAddress = entryPointAddress;\n    this.chainId = chainId;\n    const headers = {};\n    if (isTwUrl(this.bundlerUrl)) {\n      const bundleId = typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;\n      if (secretKey) {\n        headers[\"x-secret-key\"] = secretKey;\n      } else if (clientId) {\n        headers[\"x-client-id\"] = clientId;\n        if (bundleId) {\n          headers[\"x-bundle-id\"] = bundleId;\n        }\n      }\n\n      // Dashboard token\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\n      }\n\n      // CLI token\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;\n        headers[\"x-authorize-wallet\"] = \"true\";\n      }\n      setAnalyticsHeaders(headers);\n    }\n    this.userOpJsonRpcProvider = new providers.JsonRpcProvider({\n      url: this.bundlerUrl,\n      headers\n    }, {\n      name: \"Connected bundler network\",\n      chainId\n    });\n    this.initializing = this.validateChainId();\n  }\n  async validateChainId() {\n    // validate chainId is in sync with expected chainid\n    const chain = await this.userOpJsonRpcProvider.send(\"eth_chainId\", []);\n    const bundlerChain = parseInt(chain);\n    if (bundlerChain !== this.chainId) {\n      throw new Error(`bundler ${this.bundlerUrl} is on chainId ${bundlerChain}, but provider is on chainId ${this.chainId}`);\n    }\n  }\n\n  /**\n   * send a UserOperation to the bundler\n   * @param userOp1 - The UserOperation to send\n   * @returns userOpHash the id of this operation, for getUserOperationTransaction\n   */\n  async sendUserOpToBundler(userOp1) {\n    await this.initializing;\n    const hexifiedUserOp = await hexlifyUserOp(userOp1);\n    const jsonRequestData = [hexifiedUserOp, this.entryPointAddress];\n    await this.printUserOperation(\"eth_sendUserOperation\", jsonRequestData);\n    return await this.userOpJsonRpcProvider.send(\"eth_sendUserOperation\", [hexifiedUserOp, this.entryPointAddress]);\n  }\n  async estimateUserOpGas(userOp1) {\n    await this.initializing;\n    const hexifiedUserOp = await hexlifyUserOp(userOp1);\n    const jsonRequestData = [hexifiedUserOp, this.entryPointAddress];\n    await this.printUserOperation(\"eth_estimateUserOperationGas\", jsonRequestData);\n    return await this.userOpJsonRpcProvider.send(\"eth_estimateUserOperationGas\", [hexifiedUserOp, this.entryPointAddress]);\n  }\n  async printUserOperation(method, _ref) {\n    {\n      return;\n    }\n  }\n}\n\nclass VerifyingPaymasterAPI extends PaymasterAPI {\n  constructor(paymasterUrl, entryPoint, clientId, secretKey) {\n    super();\n    this.paymasterUrl = paymasterUrl;\n    this.entryPoint = entryPoint;\n    this.clientId = clientId;\n    this.secretKey = secretKey;\n  }\n  async getPaymasterAndData(userOp) {\n    const headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    if (isTwUrl(this.paymasterUrl)) {\n      if (this.secretKey && this.clientId) {\n        throw new Error(\"Cannot use both secret key and client ID. Please use secretKey for server-side applications and clientId for client-side applications.\");\n      }\n      if (this.secretKey) {\n        headers[\"x-secret-key\"] = this.secretKey;\n      } else if (this.clientId) {\n        headers[\"x-client-id\"] = this.clientId;\n        if (typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis) {\n          headers[\"x-bundle-id\"] = globalThis.APP_BUNDLE_ID;\n        }\n      }\n\n      // Dashboard token.\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\n      }\n\n      // CLI token.\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;\n        headers[\"x-authorize-wallet\"] = \"true\";\n      }\n      setAnalyticsHeaders(headers);\n    }\n\n    // Ask the paymaster to sign the transaction and return a valid paymasterAndData value.\n    const response = await fetch(this.paymasterUrl, {\n      method: \"POST\",\n      headers,\n      body: JSON.stringify({\n        jsonrpc: \"2.0\",\n        id: 1,\n        method: \"pm_sponsorUserOperation\",\n        params: [await hexlifyUserOp(userOp), this.entryPoint]\n      })\n    });\n    const res = await response.json();\n    if (!response.ok) {\n      const error = res.error || response.statusText;\n      const code = res.code || \"UNKNOWN\";\n      throw new Error(`Paymaster error: ${error}\nStatus: ${response.status}\nCode: ${code}`);\n    }\n    if (DEBUG) {\n      console.debug(\"Paymaster result:\", res);\n    }\n    if (res.result) {\n      // some paymasters return a string, some return an object with more data\n      if (typeof res.result === \"string\") {\n        return {\n          paymasterAndData: res.result\n        };\n      } else {\n        return res.result;\n      }\n    } else {\n      const error = res.error?.message || res.error || response.statusText || \"unknown error\";\n      throw new Error(`Paymaster error from ${this.paymasterUrl}: ${error}`);\n    }\n  }\n}\nconst getVerifyingPaymaster = (paymasterUrl, entryPoint, clientId, secretKey) => new VerifyingPaymasterAPI(paymasterUrl, entryPoint, clientId, secretKey);\n\n/**\n * This class encapsulates Ethers.js listener function and necessary UserOperation details to\n * discover a TransactionReceipt for the operation.\n *\n * TODO refactor this to a simple event listener on the entry point\n */\nclass UserOperationEventListener {\n  constructor(resolve, reject, entryPoint, sender, userOpHash, nonce, timeout) {\n    this.resolve = resolve;\n    this.reject = reject;\n    this.entryPoint = entryPoint;\n    this.sender = sender;\n    this.userOpHash = userOpHash;\n    this.nonce = nonce;\n    this.timeout = timeout;\n    _defineProperty(this, \"resolved\", false);\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.boundLisener = this.listenerCallback.bind(this);\n  }\n  start() {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    const filter = this.entryPoint.filters.UserOperationEvent(this.userOpHash);\n    // listener takes time... first query directly:\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    setTimeout(async () => {\n      const res = await this.entryPoint.queryFilter(filter, -10); // look at last 10 blocks\n      if (res.length > 0) {\n        void this.listenerCallback(res[0]);\n      } else {\n        this.entryPoint.once(filter, this.boundLisener);\n      }\n    }, 100);\n  }\n  stop() {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.entryPoint.off(\"UserOperationEvent\", this.boundLisener);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async listenerCallback() {\n    for (var _len = arguments.length, param = new Array(_len), _key = 0; _key < _len; _key++) {\n      param[_key] = arguments[_key];\n    }\n    // TODO clean this up..\n    // eslint-disable-next-line prefer-rest-params\n    const event = arguments[arguments.length - 1];\n    if (!event.args) {\n      console.error(\"got event without args\", event);\n      return;\n    }\n    // TODO: can this happen? we register to event by userOpHash..\n    if (event.args.userOpHash !== this.userOpHash) {\n      console.log(`== event with wrong userOpHash: sender/nonce: event.${event.args.sender}@${event.args.nonce.toString()}!= userOp.${this.sender}@${parseInt(this.nonce?.toString())}`);\n      return;\n    }\n    const transactionReceipt = await event.getTransactionReceipt();\n\n    // before returning the receipt, update the status from the event.\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    if (!event.args.success) {\n      await this.extractFailureReason(transactionReceipt);\n    }\n    this.stop();\n    this.resolve(transactionReceipt);\n    this.resolved = true;\n  }\n  async extractFailureReason(receipt) {\n    receipt.status = 0;\n    const revertReasonEvents = await this.entryPoint.queryFilter(this.entryPoint.filters.UserOperationRevertReason(this.userOpHash, this.sender), receipt.blockHash);\n    if (revertReasonEvents[0]) {\n      let message = revertReasonEvents[0].args.revertReason;\n      if (message.startsWith(\"0x08c379a0\")) {\n        // Error(string)\n        message = utils.defaultAbiCoder.decode([\"string\"], \"0x\" + message.substring(10)).toString();\n      }\n      this.reject(new Error(`UserOp failed with reason: ${message}`));\n    }\n  }\n}\n\nclass ERC4337EthersSigner extends Signer {\n  // TODO: we have 'erc4337provider', remove shared dependencies or avoid two-way reference\n  constructor(config, originalSigner, erc4337provider, httpRpcClient, smartAccountAPI) {\n    super();\n    utils.defineReadOnly(this, \"provider\", erc4337provider);\n    this.config = config;\n    this.originalSigner = originalSigner;\n    this.erc4337provider = erc4337provider;\n    this.httpRpcClient = httpRpcClient;\n    this.smartAccountAPI = smartAccountAPI;\n  }\n  // This one is called by Contract. It signs the request and passes in to Provider to be sent.\n  async sendTransaction(transaction, options) {\n    const tx = await ethers.utils.resolveProperties(transaction);\n    await this.verifyAllNecessaryFields(tx);\n    const multidimensionalNonce = randomNonce();\n    const unsigned = await this.smartAccountAPI.createUnsignedUserOp(this.httpRpcClient, {\n      target: tx.to || \"\",\n      data: tx.data?.toString() || \"0x\",\n      value: tx.value,\n      gasLimit: tx.gasLimit,\n      nonce: multidimensionalNonce,\n      maxFeePerGas: tx.maxFeePerGas,\n      maxPriorityFeePerGas: tx.maxPriorityFeePerGas\n    }, options);\n    const userOperation = await this.smartAccountAPI.signUserOp(unsigned);\n    const transactionResponse = await this.erc4337provider.constructUserOpTransactionResponse(userOperation);\n    try {\n      await this.httpRpcClient.sendUserOpToBundler(userOperation);\n    } catch (error) {\n      throw this.unwrapError(error);\n    }\n    // TODO: handle errors - transaction that is \"rejected\" by bundler is _not likely_ to ever resolve its \"wait()\"\n    return transactionResponse;\n  }\n  unwrapError(errorIn) {\n    try {\n      let errorMsg = \"Unknown Error\";\n      if (errorIn.error) {\n        errorMsg = `The bundler has failed to include UserOperation in a batch: ${errorIn.error}`;\n      } else if (errorIn.body && typeof errorIn.body === \"string\") {\n        const errorBody = JSON.parse(errorIn.body);\n        const errorStatus = errorIn.status || \"UNKNOWN\";\n        const errorCode = errorBody?.code || \"UNKNOWN\";\n        let failedOpMessage = errorBody?.error?.message || errorBody?.error?.data || errorBody?.error || errorIn.reason;\n        if (failedOpMessage?.includes(\"FailedOp\")) {\n          let paymasterInfo = \"\";\n          // TODO: better error extraction methods will be needed\n          const matched = failedOpMessage.match(/FailedOp\\((.*)\\)/);\n          if (matched) {\n            const split = matched[1].split(\",\");\n            paymasterInfo = `(paymaster address: ${split[1]})`;\n            failedOpMessage = split[2];\n          }\n          errorMsg = `The bundler has failed to include UserOperation in a batch: ${failedOpMessage} ${paymasterInfo}`;\n        } else {\n          errorMsg = `RPC error: ${failedOpMessage}\nStatus: ${errorStatus}\nCode: ${errorCode}`;\n        }\n      }\n      const error = new Error(errorMsg);\n      error.stack = errorIn.stack;\n      return error;\n    } catch (error) {}\n    return errorIn;\n  }\n  async verifyAllNecessaryFields(transactionRequest) {\n    if (!transactionRequest.to) {\n      throw new Error(\"Missing call target\");\n    }\n    if (!transactionRequest.data && !transactionRequest.value) {\n      // TBD: banning no-op UserOps seems to make sense on provider level\n      throw new Error(\"Missing call data or value\");\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  connect(provider) {\n    throw new Error(\"changing providers is not supported\");\n  }\n  async getAddress() {\n    if (!this.address) {\n      this.address = await this.erc4337provider.getSenderAccountAddress();\n    }\n    return this.address;\n  }\n  async signMessage(message) {\n    const isNotDeployed = await this.smartAccountAPI.checkAccountPhantom();\n    if (isNotDeployed && this.config.deployOnSign) {\n      console.log(\"Account contract not deployed yet. Deploying account before signing message\");\n      const tx = await this.sendTransaction({\n        to: await this.getAddress(),\n        data: \"0x\"\n      });\n      await tx.wait();\n    }\n    return await this.originalSigner.signMessage(message);\n  }\n  async signTransaction(transaction, options) {\n    const tx = await ethers.utils.resolveProperties(transaction);\n    await this.verifyAllNecessaryFields(tx);\n    const multidimensionalNonce = randomNonce();\n    const unsigned = await this.smartAccountAPI.createUnsignedUserOp(this.httpRpcClient, {\n      target: tx.to || \"\",\n      data: tx.data?.toString() || \"0x\",\n      value: tx.value,\n      gasLimit: tx.gasLimit,\n      nonce: multidimensionalNonce\n    }, options);\n    const userOperation = await this.smartAccountAPI.signUserOp(unsigned);\n    const userOpString = JSON.stringify(await hexlifyUserOp(userOperation));\n    return userOpString;\n  }\n}\n\nclass ERC4337EthersProvider extends providers.BaseProvider {\n  constructor(chainId, config, originalSigner, originalProvider, httpRpcClient, entryPoint, smartAccountAPI) {\n    super({\n      name: \"ERC-4337 Custom Network\",\n      chainId\n    });\n    this.chainId = chainId;\n    this.config = config;\n    this.originalSigner = originalSigner;\n    this.originalProvider = originalProvider;\n    this.httpRpcClient = httpRpcClient;\n    this.entryPoint = entryPoint;\n    this.smartAccountAPI = smartAccountAPI;\n    this.signer = new ERC4337EthersSigner(config, originalSigner, this, httpRpcClient, smartAccountAPI);\n  }\n  getSigner() {\n    return this.signer;\n  }\n  async perform(method, params) {\n    if (method === \"sendTransaction\" || method === \"getTransactionReceipt\") {\n      // TODO: do we need 'perform' method to be available at all?\n      // there is nobody out there to use it for ERC-4337 methods yet, we have nothing to override in fact.\n      throw new Error(\"Should not get here. Investigate.\");\n    }\n    if (method === \"estimateGas\") {\n      // gas estimation does nothing at this layer, sendTransaction will do the gas estimation for the userOp\n      return BigNumber.from(500000);\n    }\n    return await this.originalProvider.perform(method, params);\n  }\n  async getTransaction(transactionHash) {\n    // TODO\n    return await super.getTransaction(transactionHash);\n  }\n  async getTransactionReceipt(transactionHash) {\n    const userOpHash = await transactionHash;\n    const sender = await this.getSenderAccountAddress();\n    return await new Promise((resolve, reject) => {\n      new UserOperationEventListener(resolve, reject, this.entryPoint, sender, userOpHash).start();\n    });\n  }\n  async getSenderAccountAddress() {\n    return await this.smartAccountAPI.getAccountAddress();\n  }\n  async waitForTransaction(transactionHash, confirmations, timeout) {\n    const sender = await this.getSenderAccountAddress();\n    return await new Promise((resolve, reject) => {\n      const listener = new UserOperationEventListener(resolve, reject, this.entryPoint, sender, transactionHash, undefined, timeout);\n      listener.start();\n    });\n  }\n\n  // fabricate a response in a format usable by ethers users...\n  async constructUserOpTransactionResponse(userOp1) {\n    const userOp = await utils.resolveProperties(userOp1);\n    const userOpHash = await this.smartAccountAPI.getUserOpHash(userOp);\n    const waitForUserOp = async () => await new Promise((resolve, reject) => {\n      new UserOperationEventListener(resolve, reject, this.entryPoint, userOp.sender, userOpHash, userOp.nonce).start();\n    });\n    return {\n      hash: userOpHash,\n      confirmations: 0,\n      from: userOp.sender,\n      nonce: 0,\n      // not the real nonce, but good enough for this purpose\n      gasLimit: BigNumber.from(userOp.callGasLimit),\n      // ??\n      value: BigNumber.from(0),\n      data: utils.hexValue(userOp.callData),\n      // should extract the actual called method from this \"execFromEntryPoint()\" call\n      chainId: this.chainId,\n      wait: async confirmations => {\n        const transactionReceipt = await waitForUserOp();\n        if (userOp.initCode.length !== 0) {\n          // checking if the wallet has been deployed by the transaction; it must be if we are here\n          await this.smartAccountAPI.checkAccountPhantom();\n        }\n        return transactionReceipt;\n      }\n    };\n  }\n  async detectNetwork() {\n    return this.originalProvider.detectNetwork();\n  }\n}\n\n/**\n * wrap an existing provider to tunnel requests through Account Abstraction.\n * @param originalProvider - The normal provider\n * @param config - see {@link ClientConfig} for more info\n * @param originalSigner - use this signer as the owner. of this wallet. By default, use the provider's signer\n */\nfunction create4337Provider(config, accountApi, originalProvider, chainId) {\n  const entryPoint = EntryPoint__factory.connect(config.entryPointAddress, originalProvider);\n  const httpRpcClient = new HttpRpcClient(config.bundlerUrl, config.entryPointAddress, chainId, config.clientId, config.secretKey);\n  return new ERC4337EthersProvider(chainId, config, config.localSigner, originalProvider, httpRpcClient, entryPoint, accountApi);\n}\n\nconst DUMMY_SIGNATURE = \"0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c\";\n\n/**\n * Base class for all Smart Wallet ERC-4337 Clients to implement.\n * Subclass should inherit 5 methods to support a specific wallet contract:\n *\n * - getAccountInitCode - return the value to put into the \"initCode\" field, if the account is not yet deployed. should create the account instance using a factory contract.\n * - getNonce - return current account's nonce value\n * - encodeExecute - encode the call from entryPoint through our account to the target contract.\n * - signUserOpHash - sign the hash of a UserOp.\n *\n * The user can use the following APIs:\n * - createUnsignedUserOp - given \"target\" and \"calldata\", fill userOp to perform that operation from the account.\n * - createSignedUserOp - helper to call the above createUnsignedUserOp, and then extract the userOpHash and sign it\n */\nclass BaseAccountAPI {\n  // entryPoint connected to \"zero\" address. allowed to make static calls (e.g. to getSenderAddress)\n\n  /**\n   * base constructor.\n   * subclass SHOULD add parameters that define the owner (signer) of this wallet\n   */\n  constructor(params) {\n    _defineProperty(this, \"isPhantom\", true);\n    this.provider = params.provider;\n    this.entryPointAddress = params.entryPointAddress;\n    this.accountAddress = params.accountAddress;\n    this.paymasterAPI = params.paymasterAPI;\n    this.gasless = params.gasless;\n\n    // factory \"connect\" define the contract address. the contract \"connect\" defines the \"from\" address.\n    this.entryPointView = EntryPoint__factory.connect(params.entryPointAddress, params.provider).connect(ethers.constants.AddressZero);\n  }\n\n  /**\n   * return the value to put into the \"initCode\" field, if the contract is not yet deployed.\n   * this value holds the \"factory\" address, followed by this account's information\n   */\n\n  /**\n   * return current account's nonce.\n   */\n\n  /**\n   * encode the call from entryPoint through our account to the target contract.\n   * @param target - The target contract address\n   * @param value - The value to send to the target contract\n   * @param data - The calldata to send to the target contract\n   */\n\n  /**\n   * sign a userOp's hash (userOpHash).\n   * @param userOpHash - The hash to sign\n   */\n\n  /**\n   * calculate the account address even before it is deployed\n   */\n\n  /**\n   * check if the contract is already deployed.\n   */\n  async checkAccountPhantom() {\n    if (!this.isPhantom) {\n      // already deployed. no need to check anymore.\n      return this.isPhantom;\n    }\n    const senderAddressCode = await this.provider.getCode(this.getAccountAddress());\n    if (senderAddressCode.length > 2) {\n      this.isPhantom = false;\n    }\n    return this.isPhantom;\n  }\n\n  /**\n   * return initCode value to into the UserOp.\n   * (either deployment code, or empty hex if contract already deployed)\n   */\n  async getInitCode() {\n    if (await this.checkAccountPhantom()) {\n      return await this.getAccountInitCode();\n    }\n    return \"0x\";\n  }\n\n  /**\n   * return maximum gas used for verification.\n   * NOTE: createUnsignedUserOp will add to this value the cost of creation, if the contract is not yet created.\n   */\n  async getVerificationGasLimit() {\n    return 100000;\n  }\n\n  /**\n   * return userOpHash for signing.\n   * This value matches entryPoint.getUserOpHash (calculated off-chain, to avoid a view call)\n   * @param userOp - userOperation, (signature field ignored)\n   */\n  async getUserOpHash(userOp) {\n    const chainId = await this.provider.getNetwork().then(net => net.chainId);\n    return getUserOpHashV06(userOp, this.entryPointAddress, chainId);\n  }\n\n  /**\n   * return the account's address.\n   * this value is valid even before deploying the contract.\n   */\n  async getAccountAddress() {\n    if (!this.senderAddress) {\n      if (this.accountAddress) {\n        this.senderAddress = this.accountAddress;\n      } else {\n        this.senderAddress = await this.getCounterFactualAddress();\n      }\n    }\n    return this.senderAddress;\n  }\n  async estimateCreationGas(initCode) {\n    if (!initCode || initCode === \"0x\") {\n      return 0;\n    }\n    const deployerAddress = initCode.substring(0, 42);\n    const deployerCallData = \"0x\" + initCode.substring(42);\n    return await this.provider.estimateGas({\n      to: deployerAddress,\n      data: deployerCallData\n    });\n  }\n  async createUnsignedUserOp(httpRpcClient, info, options) {\n    // construct the userOp without gasLimit or preVerifictaionGas\n    const initCode = await this.getInitCode();\n    const value = parseNumber(info.value) ?? BigNumber.from(0);\n    const callData = options?.batchData ? info.data : await this.prepareExecute(info.target, value, info.data).then(tx => tx.encode());\n    let {\n      maxFeePerGas,\n      maxPriorityFeePerGas\n    } = info;\n    if (!maxFeePerGas || !maxPriorityFeePerGas) {\n      const feeData = await getDynamicFeeData(this.provider);\n      if (!maxPriorityFeePerGas) {\n        maxPriorityFeePerGas = feeData.maxPriorityFeePerGas ?? undefined;\n      }\n      if (!maxFeePerGas) {\n        maxFeePerGas = feeData.maxFeePerGas ?? undefined;\n        const network = await this.provider.getNetwork();\n        const chainId = network.chainId;\n        if (chainId === Celo.chainId || chainId === CeloAlfajoresTestnet.chainId || chainId === CeloBaklavaTestnet.chainId) {\n          maxPriorityFeePerGas = maxFeePerGas;\n        }\n      }\n    }\n    if (!maxFeePerGas || !maxPriorityFeePerGas) {\n      throw new Error(\"maxFeePerGas or maxPriorityFeePerGas could not be calculated, please pass them explicitely\");\n    }\n    const [sender, nonce] = await Promise.all([this.getAccountAddress(), info.nonce ? Promise.resolve(info.nonce) : this.getNonce()]);\n    const partialOp = {\n      sender,\n      nonce,\n      initCode,\n      callData,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      callGasLimit: BigNumber.from(1000000),\n      verificationGasLimit: BigNumber.from(1000000),\n      preVerificationGas: BigNumber.from(1000000),\n      paymasterAndData: \"0x\",\n      signature: DUMMY_SIGNATURE\n    };\n\n    // paymaster data + maybe used for estimation as well\n    const gasless = options?.gasless !== undefined ? options.gasless : this.gasless;\n    if (gasless) {\n      const paymasterResult = await this.paymasterAPI.getPaymasterAndData(partialOp);\n      const paymasterAndData = paymasterResult.paymasterAndData;\n      if (paymasterAndData && paymasterAndData !== \"0x\") {\n        partialOp.paymasterAndData = paymasterAndData;\n      }\n      // paymaster can have the gas limits in the response\n      if (paymasterResult.callGasLimit && paymasterResult.verificationGasLimit && paymasterResult.preVerificationGas) {\n        partialOp.callGasLimit = BigNumber.from(paymasterResult.callGasLimit);\n        partialOp.verificationGasLimit = BigNumber.from(paymasterResult.verificationGasLimit);\n        partialOp.preVerificationGas = BigNumber.from(paymasterResult.preVerificationGas);\n      } else {\n        // otherwise fallback to bundler for gas limits\n        let estimates;\n        try {\n          estimates = await httpRpcClient.estimateUserOpGas(partialOp);\n        } catch (error) {\n          throw this.unwrapBundlerError(error);\n        }\n        partialOp.callGasLimit = BigNumber.from(estimates.callGasLimit);\n        partialOp.verificationGasLimit = BigNumber.from(estimates.verificationGasLimit);\n        partialOp.preVerificationGas = BigNumber.from(estimates.preVerificationGas);\n        // need paymaster to re-sign after estimates\n        if (paymasterAndData && paymasterAndData !== \"0x\") {\n          const paymasterResult2 = await this.paymasterAPI.getPaymasterAndData(partialOp);\n          if (paymasterResult2.paymasterAndData && paymasterResult2.paymasterAndData !== \"0x\") {\n            partialOp.paymasterAndData = paymasterResult2.paymasterAndData;\n          }\n        }\n      }\n    } else {\n      // query bundler for gas limits\n      let estimates;\n      try {\n        estimates = await httpRpcClient.estimateUserOpGas(partialOp);\n      } catch (error) {\n        throw this.unwrapBundlerError(error);\n      }\n      partialOp.callGasLimit = BigNumber.from(estimates.callGasLimit);\n      partialOp.verificationGasLimit = BigNumber.from(estimates.verificationGasLimit);\n      partialOp.preVerificationGas = BigNumber.from(estimates.preVerificationGas);\n    }\n    return {\n      ...partialOp,\n      signature: \"\"\n    };\n  }\n\n  /**\n   * Sign the filled userOp.\n   * @param userOp - The UserOperation to sign (with signature field ignored)\n   */\n  async signUserOp(userOp) {\n    const userOpHash = await this.getUserOpHash(userOp);\n    const signature = await this.signUserOpHash(userOpHash);\n    return {\n      ...userOp,\n      signature\n    };\n  }\n\n  /**\n   * get the transaction that has this userOpHash mined, or null if not found\n   * @param userOpHash - returned by sendUserOpToBundler (or by getUserOpHash..)\n   * @param timeout - stop waiting after this timeout\n   * @param interval - time to wait between polls.\n   * @returns The transactionHash this userOp was mined, or null if not found.\n   */\n  async getUserOpReceipt(userOpHash) {\n    let timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30000;\n    let interval = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2000;\n    const endtime = Date.now() + timeout;\n    while (Date.now() < endtime) {\n      const events = await this.entryPointView.queryFilter(this.entryPointView.filters.UserOperationEvent(userOpHash));\n      if (events[0]) {\n        return events[0].transactionHash;\n      }\n      await new Promise(resolve => setTimeout(resolve, interval));\n    }\n    return null;\n  }\n  unwrapBundlerError(error) {\n    const message = error?.error?.message || error.error || error.message || error;\n    return new Error(message);\n  }\n}\nfunction parseNumber(a) {\n  if (!a || a === \"\") {\n    return null;\n  }\n  return BigNumber.from(a.toString());\n}\n\nclass AccountAPI extends BaseAccountAPI {\n  constructor(params, originalProvider) {\n    super({\n      ...params,\n      provider: originalProvider\n    });\n    this.params = params;\n    // Technically dont need the signer here, but we need to encode/estimate gas with it so a signer is required\n    // We don't want to use the localSigner directly since it might be connected to another chain\n    // so we just use the public hardhat pkey instead\n    this.sdk = ThirdwebSDK.fromPrivateKey(LOCAL_NODE_PKEY, params.chain, {\n      clientId: params.clientId,\n      secretKey: params.secretKey,\n      // @ts-expect-error expected chain type error\n      supportedChains: typeof params.chain === \"object\" ? [params.chain] : undefined\n    });\n  }\n  async getChainId() {\n    return await this.provider.getNetwork().then(n => n.chainId);\n  }\n  async getAccountContract() {\n    if (!this.accountContract) {\n      if (this.params.accountInfo?.abi) {\n        this.accountContract = await this.sdk.getContract(await this.getAccountAddress(), this.params.accountInfo.abi);\n      } else {\n        this.accountContract = await this.sdk.getContract(await this.getAccountAddress(), ACCOUNT_CORE_ABI);\n      }\n    }\n    return this.accountContract;\n  }\n  async getAccountInitCode() {\n    const factory = await this.getFactoryContract();\n    console.log(\"Deploying smart wallet via factory\");\n    const localSigner = await this.params.localSigner.getAddress();\n    const tx = await this.params.factoryInfo.createAccount(factory, localSigner);\n    try {\n      console.log(\"Cost to deploy smart wallet: \", (await tx.estimateGasCost()).ether, \"ETH\");\n    } catch (e) {\n      console.error(\"Cost to deploy smart wallet: unknown\", e);\n    }\n    return utils.hexConcat([factory.getAddress(), tx.encode()]);\n  }\n  async getFactoryContract() {\n    if (this.factoryContract) {\n      return this.factoryContract;\n    }\n    if (this.params.factoryInfo?.abi) {\n      this.factoryContract = await this.sdk.getContract(this.params.factoryAddress, this.params.factoryInfo.abi);\n    } else {\n      this.factoryContract = await this.sdk.getContract(this.params.factoryAddress);\n    }\n    return this.factoryContract;\n  }\n  async getCounterFactualAddress() {\n    if (this.params.accountAddress) {\n      return this.params.accountAddress;\n    }\n    const factory = await this.getFactoryContract();\n    const localSigner = await this.params.localSigner.getAddress();\n    return this.params.factoryInfo.getAccountAddress(factory, localSigner);\n  }\n  async getNonce() {\n    if (await this.checkAccountPhantom()) {\n      return BigNumber.from(0);\n    }\n    const accountContract = await this.getAccountContract();\n    return this.params.accountInfo.getNonce(accountContract);\n  }\n  async prepareExecute(target, value, data) {\n    const accountContract = await this.getAccountContract();\n    return this.params.accountInfo.execute(accountContract, target, value, data);\n  }\n  async prepareExecuteBatch(targets, values, datas) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.prepare(\"executeBatch\", [targets, values, datas]);\n  }\n  async signUserOpHash(userOpHash) {\n    return await this.params.localSigner.signMessage(utils.arrayify(userOpHash));\n  }\n  async isAcountDeployed() {\n    return !(await this.checkAccountPhantom());\n  }\n}\n\nclass SmartWalletConnector extends Connector {\n  constructor(config) {\n    super();\n    this.config = config;\n  }\n  async initialize(params) {\n    const config = this.config;\n    const originalProvider = getChainProvider(config.chain, {\n      clientId: config.clientId,\n      secretKey: config.secretKey\n    });\n    this.chainId = (await originalProvider.getNetwork()).chainId;\n    const bundlerUrl = this.config.bundlerUrl || `https://${this.chainId}.bundler.thirdweb.com`;\n    const paymasterUrl = this.config.paymasterUrl || `https://${this.chainId}.bundler.thirdweb.com/v2`;\n    const entryPointAddress = config.entryPointAddress || ENTRYPOINT_ADDRESS;\n    const deployOnSign = config.deployOnSign ?? true;\n    const localSigner = await params.personalWallet.getSigner();\n    const providerConfig = {\n      chain: config.chain,\n      localSigner,\n      entryPointAddress,\n      bundlerUrl,\n      paymasterAPI: this.config.paymasterAPI ? this.config.paymasterAPI : getVerifyingPaymaster(paymasterUrl, entryPointAddress, this.config.clientId, this.config.secretKey),\n      gasless: config.gasless,\n      deployOnSign: deployOnSign,\n      factoryAddress: config.factoryAddress,\n      accountAddress: params.accountAddress,\n      factoryInfo: config.factoryInfo || this.defaultFactoryInfo(),\n      accountInfo: config.accountInfo || this.defaultAccountInfo(),\n      clientId: config.clientId,\n      secretKey: config.secretKey\n    };\n    this.personalWallet = params.personalWallet;\n    const accountApi = new AccountAPI(providerConfig, originalProvider);\n    this.aaProvider = create4337Provider(providerConfig, accountApi, originalProvider, this.chainId);\n    this.accountApi = accountApi;\n  }\n  async connect(connectionArgs) {\n    await this.initialize(connectionArgs);\n    return await this.getAddress();\n  }\n  getProvider() {\n    if (!this.aaProvider) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return Promise.resolve(this.aaProvider);\n  }\n  async getSigner() {\n    if (!this.aaProvider) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return Promise.resolve(this.aaProvider.getSigner());\n  }\n  async getAddress() {\n    const signer = await this.getSigner();\n    return signer.getAddress();\n  }\n  async isConnected() {\n    try {\n      const address = await this.getAddress();\n      return !!address;\n    } catch (e) {\n      return false;\n    }\n  }\n  async disconnect() {\n    this.personalWallet = undefined;\n    this.aaProvider = undefined;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  async switchChain(chainId) {\n    const provider = await this.getProvider();\n    const currentChainId = (await provider.getNetwork()).chainId;\n    if (currentChainId !== chainId) {\n      // only throw if actually trying to switch chains\n      throw new Error(\"Not supported.\");\n    }\n  }\n  setupListeners() {\n    return Promise.resolve();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateChains(chains) {}\n\n  /**\n   * Check whether the connected signer can execute a given transaction using the smart wallet.\n   * @param transaction - The transaction to execute using the smart wallet.\n   * @returns whether the connected signer can execute the transaction using the smart wallet.\n   */\n  async hasPermissionToExecute(transaction) {\n    const accountContract = await this.getAccountContract();\n    const signer = await this.getSigner();\n    const signerAddress = await signer.getAddress();\n    const restrictions = (await accountContract.account.getAllSigners()).filter(item => ethers.utils.getAddress(item.signer) === ethers.utils.getAddress(signerAddress))[0]?.permissions;\n    if (!restrictions) {\n      return false;\n    }\n    return restrictions.approvedCallTargets.includes(transaction.getTarget());\n  }\n\n  /// PREPARED TRANSACTIONS\n\n  /**\n   * Send a single transaction without waiting for confirmations\n   * @param transaction - the transaction to send\n   * @param config - optional the transaction configuration\n   * @returns The awaitable transaction\n   */\n  async send(transaction, options) {\n    const signer = await this.getSigner();\n    return signer.sendTransaction({\n      to: transaction.getTarget(),\n      data: transaction.encode(),\n      value: await transaction.getValue()\n    }, options);\n  }\n\n  /**\n   * Execute a single transaction (waiting for confirmations)\n   * @param transaction - The transaction to execute\n   * @returns The transaction receipt\n   */\n  async execute(transaction, options) {\n    const tx = await this.send(transaction, options);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n  async sendBatch(transactions, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    const {\n      tx,\n      batchData\n    } = await this.prepareBatchTx(transactions);\n    return await signer.sendTransaction({\n      to: await signer.getAddress(),\n      data: tx.encode(),\n      value: 0\n    }, {\n      ...options,\n      batchData\n    });\n  }\n\n  /**\n   * Execute multiple transactions in a single batch\n   * @param transactions - The transactions to execute\n   * @returns The transaction receipt\n   */\n  async executeBatch(transactions, options) {\n    const tx = await this.sendBatch(transactions, options);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n\n  /// RAW TRANSACTIONS\n\n  async sendRaw(transaction, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    return signer.sendTransaction(transaction, options);\n  }\n  async executeRaw(transaction, options) {\n    const tx = await this.sendRaw(transaction, options);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n  async sendBatchRaw(transactions, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    const batch = await this.prepareBatchRaw(transactions);\n    return signer.sendTransaction({\n      to: await signer.getAddress(),\n      data: batch.tx.encode(),\n      value: 0\n    }, {\n      ...options,\n      batchData: batch.batchData // batched tx flag\n    });\n  }\n  async executeBatchRaw(transactions, options) {\n    const tx = await this.sendBatchRaw(transactions, options);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n\n  /// ESTIMATION\n\n  async estimate(transaction, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return this.estimateTx({\n      target: transaction.getTarget(),\n      data: transaction.encode(),\n      value: await transaction.getValue(),\n      gasLimit: await transaction.getOverrides().gasLimit,\n      maxFeePerGas: await transaction.getOverrides().maxFeePerGas,\n      maxPriorityFeePerGas: await transaction.getOverrides().maxPriorityFeePerGas,\n      nonce: await transaction.getOverrides().nonce\n    }, options);\n  }\n  async estimateRaw(transaction, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const tx = await ethers.utils.resolveProperties(transaction);\n    return this.estimateTx({\n      target: tx.to || constants.AddressZero,\n      data: tx.data?.toString() || \"\",\n      value: tx.value || BigNumber.from(0),\n      gasLimit: tx.gasLimit,\n      maxFeePerGas: tx.maxFeePerGas,\n      maxPriorityFeePerGas: tx.maxPriorityFeePerGas,\n      nonce: tx.nonce\n    }, options);\n  }\n  async estimateBatch(transactions, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const {\n      tx,\n      batchData\n    } = await this.prepareBatchTx(transactions);\n    return this.estimateTx({\n      target: tx.getTarget(),\n      data: tx.encode(),\n      value: await tx.getValue(),\n      gasLimit: await tx.getOverrides().gasLimit,\n      maxFeePerGas: await tx.getOverrides().maxFeePerGas,\n      maxPriorityFeePerGas: await tx.getOverrides().maxPriorityFeePerGas,\n      nonce: await tx.getOverrides().nonce\n    }, {\n      ...options,\n      batchData\n    });\n  }\n  async estimateBatchRaw(transactions, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const {\n      tx,\n      batchData\n    } = await this.prepareBatchRaw(transactions);\n    return this.estimateTx({\n      target: tx.getTarget(),\n      data: tx.encode(),\n      value: await tx.getValue(),\n      gasLimit: await tx.getOverrides().gasLimit,\n      maxFeePerGas: await tx.getOverrides().maxFeePerGas,\n      maxPriorityFeePerGas: await tx.getOverrides().maxPriorityFeePerGas,\n      nonce: await tx.getOverrides().nonce\n    }, {\n      ...options,\n      batchData\n    });\n  }\n\n  //// DEPLOYMENT\n\n  /**\n   * Manually deploy the smart wallet contract. If already deployed this will throw an error.\n   * Note that this is not necessary as the smart wallet will be deployed automatically on the first transaction the user makes.\n   * @returns The transaction receipt\n   */\n  async deploy(options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    const tx = await signer.sendTransaction({\n      to: await signer.getAddress(),\n      data: \"0x\"\n    }, {\n      ...options,\n      batchData: {\n        targets: [],\n        data: [],\n        values: []\n      } // batched tx flag to avoid hitting the Router fallback method\n    });\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n\n  /**\n   * Check if the smart wallet contract is deployed\n   * @returns true if the smart wallet contract is deployed\n   */\n  async isDeployed() {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return await this.accountApi.isAcountDeployed();\n  }\n  async deployIfNeeded(options) {\n    const isDeployed = await this.isDeployed();\n    if (!isDeployed) {\n      await this.deploy(options);\n    }\n  }\n\n  //// PERMISSIONS\n\n  async grantPermissions(target, permissions) {\n    await this.deployIfNeeded();\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.grantPermissions(target, permissions);\n  }\n  async revokePermissions(target) {\n    await this.deployIfNeeded();\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.revokeAccess(target);\n  }\n  async addAdmin(target) {\n    await this.deployIfNeeded();\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.grantAdminPermissions(target);\n  }\n  async removeAdmin(target) {\n    await this.deployIfNeeded();\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.revokeAdminPermissions(target);\n  }\n  async getAllActiveSigners() {\n    const isDeployed = await this.isDeployed();\n    if (isDeployed) {\n      const accountContract = await this.getAccountContract();\n      return accountContract.account.getAllAdminsAndSigners();\n    } else {\n      const personalWallet = await this.personalWallet?.getSigner();\n      if (!personalWallet) {\n        throw new Error(\"Personal wallet not connected\");\n      }\n      return [{\n        isAdmin: true,\n        signer: await personalWallet.getAddress(),\n        permissions: {\n          startDate: new Date(0),\n          expirationDate: new Date(0),\n          nativeTokenLimitPerTransaction: BigNumber.from(0),\n          approvedCallTargets: []\n        }\n      }];\n    }\n  }\n\n  /**\n   * Get the underlying account contract of the smart wallet.\n   * @returns The account contract of the smart wallet.\n   */\n  async getAccountContract() {\n    const isDeployed = await this.isDeployed();\n    if (!isDeployed) {\n      throw new Error(\"Account contract is not deployed yet. You can deploy it manually using SmartWallet.deploy(), or by executing a transaction from this wallet.\");\n    }\n    // getting a new instance everytime\n    // to avoid caching issues pre/post deployment\n    const sdk = ThirdwebSDK.fromSigner(await this.getSigner(), this.config.chain, {\n      clientId: this.config.clientId,\n      secretKey: this.config.secretKey\n    });\n    if (this.config.accountInfo?.abi) {\n      return sdk.getContract(await this.getAddress(), this.config.accountInfo.abi);\n    } else {\n      return sdk.getContract(await this.getAddress());\n    }\n  }\n\n  /**\n   * Get the underlying account factory contract of the smart wallet.\n   * @returns The account factory contract.\n   */\n  async getFactoryContract() {\n    const sdk = ThirdwebSDK.fromSigner(await this.getSigner(), this.config.chain, {\n      clientId: this.config.clientId,\n      secretKey: this.config.secretKey\n    });\n    if (this.config.factoryInfo?.abi) {\n      return sdk.getContract(this.config.factoryAddress, this.config.factoryInfo.abi);\n    }\n    return sdk.getContract(this.config.factoryAddress);\n  }\n  defaultFactoryInfo() {\n    return {\n      createAccount: async (factory, owner) => {\n        return factory.prepare(\"createAccount\", [owner, ethers.utils.toUtf8Bytes(\"\")]);\n      },\n      getAccountAddress: async (factory, owner) => {\n        return await factory.call(\"getAddress\", [owner, ethers.utils.toUtf8Bytes(\"\")]);\n      }\n    };\n  }\n  defaultAccountInfo() {\n    return {\n      execute: async (account, target, value, data) => {\n        return account.prepare(\"execute\", [target, value, data]);\n      },\n      getNonce: async account => {\n        return account.call(\"getNonce\", []);\n      }\n    };\n  }\n\n  /// PRIVATE METHODS\n\n  async estimateTx(tx, options) {\n    if (!this.accountApi || !this.aaProvider) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    let deployGasLimit = BigNumber.from(0);\n    const [provider, isDeployed] = await Promise.all([this.getProvider(), this.isDeployed()]);\n    if (!isDeployed) {\n      deployGasLimit = await this.estimateDeploymentGasLimit();\n    }\n    const [userOp, gasPrice] = await Promise.all([this.accountApi.createUnsignedUserOp(this.aaProvider.httpRpcClient, tx, options), getGasPrice(provider)]);\n    const resolved = await utils.resolveProperties(userOp);\n    const transactionGasLimit = BigNumber.from(resolved.callGasLimit);\n    const transactionCost = transactionGasLimit.mul(gasPrice);\n    const deployCost = deployGasLimit.mul(gasPrice);\n    const totalCost = deployCost.add(transactionCost);\n    return {\n      ether: utils.formatEther(totalCost),\n      wei: totalCost,\n      details: {\n        deployGasLimit,\n        transactionGasLimit,\n        gasPrice,\n        transactionCost,\n        deployCost,\n        totalCost\n      }\n    };\n  }\n  async estimateDeploymentGasLimit() {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const initCode = await this.accountApi.getInitCode();\n    const [initGas, verificationGasLimit] = await Promise.all([this.accountApi.estimateCreationGas(initCode), this.accountApi.getVerificationGasLimit()]);\n    return BigNumber.from(verificationGasLimit).add(initGas);\n  }\n  async prepareBatchRaw(transactions) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const resolvedTxs = await Promise.all(transactions.map(transaction => ethers.utils.resolveProperties(transaction)));\n    const targets = resolvedTxs.map(tx => tx.to || constants.AddressZero);\n    const data = resolvedTxs.map(tx => tx.data || \"0x\");\n    const values = resolvedTxs.map(tx => tx.value || BigNumber.from(0));\n    return {\n      tx: await this.accountApi.prepareExecuteBatch(targets, values, data),\n      batchData: {\n        targets,\n        data,\n        values\n      }\n    };\n  }\n  async prepareBatchTx(transactions) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const targets = transactions.map(tx => tx.getTarget());\n    const data = transactions.map(tx => tx.encode());\n    const values = await Promise.all(transactions.map(tx => tx.getValue()));\n    return {\n      tx: await this.accountApi.prepareExecuteBatch(targets, values, data),\n      batchData: {\n        targets,\n        data,\n        values\n      }\n    };\n  }\n}\n\nexport { SmartWalletConnector };\n"],"names":["isTwUrl","url","host","URL","hostname","endsWith","getValidPublicRPCUrl","chain","getValidChainRPCs","map","rpc","pathname","search","toString","e","async","hexlifyUserOp","op","userOp","utils","Object","keys","key","val","startsWith","reduce","set","_ref","k","v","randomNonce","hexString","generateRandomUint192","rand1","BigInt","Math","floor","random","rand2","rand3","rand4","rand5","rand6","length","BigNumber","from","PaymasterAPI","HttpRpcClient","constructor","bundlerUrl","entryPointAddress","chainId","clientId","secretKey","this","headers","bundleId","globalThis","APP_BUNDLE_ID","undefined","TW_AUTH_TOKEN","concat","TW_CLI_AUTH_TOKEN","setAnalyticsHeaders","userOpJsonRpcProvider","providers","name","initializing","validateChainId","send","bundlerChain","parseInt","Error","sendUserOpToBundler","userOp1","hexifiedUserOp","jsonRequestData","printUserOperation","estimateUserOpGas","method","VerifyingPaymasterAPI","paymasterUrl","entryPoint","super","getPaymasterAndData","response","fetch","body","JSON","stringify","jsonrpc","id","params","res","json","ok","error","statusText","code","status","result","paymasterAndData","_res$error","message","getVerifyingPaymaster","UserOperationEventListener","resolve","reject","sender","userOpHash","nonce","timeout","_defineProperty","boundLisener","listenerCallback","bind","start","filter","filters","UserOperationEvent","setTimeout","queryFilter","once","stop","off","_len","arguments","param","Array","_key","event","args","console","_this$nonce","log","transactionReceipt","getTransactionReceipt","success","extractFailureReason","resolved","receipt","revertReasonEvents","UserOperationRevertReason","blockHash","revertReason","decode","substring","ERC4337EthersSigner","Signer","config","originalSigner","erc4337provider","httpRpcClient","smartAccountAPI","sendTransaction","transaction","options","_tx$data","tx","ethers","verifyAllNecessaryFields","multidimensionalNonce","unsigned","createUnsignedUserOp","target","to","data","value","gasLimit","maxFeePerGas","maxPriorityFeePerGas","userOperation","signUserOp","transactionResponse","constructUserOpTransactionResponse","unwrapError","errorIn","errorMsg","_errorBody$error","_errorBody$error2","_failedOpMessage","errorBody","parse","errorStatus","errorCode","failedOpMessage","reason","includes","paymasterInfo","matched","match","split","stack","transactionRequest","connect","provider","getAddress","address","getSenderAccountAddress","signMessage","checkAccountPhantom","deployOnSign","wait","signTransaction","_tx$data2","ERC4337EthersProvider","originalProvider","signer","getSigner","perform","getTransaction","transactionHash","Promise","getAccountAddress","waitForTransaction","confirmations","getUserOpHash","waitForUserOp","hash","callGasLimit","callData","initCode","detectNetwork","BaseAccountAPI","accountAddress","paymasterAPI","gasless","entryPointView","EntryPoint__factory","isPhantom","getCode","getInitCode","getAccountInitCode","getVerificationGasLimit","getNetwork","then","net","hashedUserOp","initCodeHash","callDataHash","verificationGasLimit","preVerificationGas","paymasterAndDataHash","encoded","encode","components","type","enc","getUserOpHashV06","senderAddress","getCounterFactualAddress","estimateCreationGas","deployerAddress","deployerCallData","estimateGas","info","_parseNumber","a","parseNumber","batchData","prepareExecute","feeData","getDynamicFeeData","_feeData$maxPriorityF","_feeData$maxFeePerGas","Celo","CeloAlfajoresTestnet","CeloBaklavaTestnet","all","getNonce","partialOp","signature","paymasterResult","estimates","unwrapBundlerError","paymasterResult2","signUserOpHash","getUserOpReceipt","interval","endtime","Date","now","events","_error$error","AccountAPI","sdk","ThirdwebSDK","fromPrivateKey","LOCAL_NODE_PKEY","supportedChains","getChainId","n","getAccountContract","_this$params$accountI","accountContract","accountInfo","abi","getContract","ACCOUNT_CORE_ABI","factory","getFactoryContract","localSigner","factoryInfo","createAccount","estimateGasCost","ether","_this$params$factoryI","factoryContract","factoryAddress","execute","prepareExecuteBatch","targets","values","datas","prepare","isAcountDeployed","SmartWalletConnector","Connector","initialize","_config$deployOnSign","getChainProvider","ENTRYPOINT_ADDRESS","personalWallet","providerConfig","defaultFactoryInfo","defaultAccountInfo","accountApi","aaProvider","create4337Provider","connectionArgs","getProvider","isConnected","disconnect","switchChain","setupListeners","updateChains","chains","hasPermissionToExecute","_await$accountContrac","signerAddress","restrictions","account","getAllSigners","item","permissions","approvedCallTargets","getTarget","getValue","sendBatch","transactions","prepareBatchTx","executeBatch","sendRaw","executeRaw","sendBatchRaw","batch","prepareBatchRaw","executeBatchRaw","estimate","estimateTx","getOverrides","estimateRaw","_tx$data3","constants","estimateBatch","estimateBatchRaw","deploy","isDeployed","deployIfNeeded","grantPermissions","revokePermissions","revokeAccess","addAdmin","grantAdminPermissions","removeAdmin","revokeAdminPermissions","getAllActiveSigners","getAllAdminsAndSigners","_this$personalWallet","isAdmin","startDate","expirationDate","nativeTokenLimitPerTransaction","_this$config$accountI","fromSigner","_this$config$factoryI","owner","call","deployGasLimit","estimateDeploymentGasLimit","gasPrice","getGasPrice","transactionGasLimit","transactionCost","mul","deployCost","totalCost","add","wei","details","initGas","resolvedTxs"],"sourceRoot":""}