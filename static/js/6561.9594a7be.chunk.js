"use strict";(self.webpackChunkclient=self.webpackChunkclient||[]).push([[6561],{91609:(t,i,n)=>{function s(t){return"string"===typeof t?Number.parseInt(t,"0x"===t.trim().substring(0,2)?16:10):"bigint"===typeof t?Number(t):t}n.d(i,{n:()=>s})},6561:(t,i,n)=>{n.d(i,{LocalWalletConnector:()=>p});var s=n(63700),e=n(2600),a=n(91609),r=n(20684),o=n(24115),c=n(99816),h=n(68408),d=n(73580);n(65892);class g extends h.Signer{constructor(t){super(),this.signer=t,(0,d.defineReadOnly)(this,"provider",t.provider)}async getAddress(){return await this.signer.getAddress()}async signMessage(t){return await this.signer.signMessage(t)}async signTransaction(t){return await this.signer.signTransaction(t)}connect(t){return new g(this.signer.connect(t))}_signTypedData(t,i,n){return this.signer._signTypedData(t,i,n)}async sendTransaction(t){if(!this.provider)throw new Error("Provider not found");const i={...await(0,o.g)(this.provider),...t};return await this.signer.sendTransaction(i)}}var l=new WeakMap,u=new WeakMap;class p extends r.C{constructor(t){super(),(0,e._)(this,"id","local_wallet"),(0,e._)(this,"name","Local Wallet"),(0,s._)(this,l,{writable:!0,value:void 0}),(0,s._)(this,u,{writable:!0,value:void 0}),(0,e._)(this,"shimDisconnectKey","localWallet.shimDisconnect"),(0,e._)(this,"onChainChanged",(t=>{const i=(0,a.n)(t),n=!this.options.chains.find((t=>t.chainId===i));this.emit("change",{chain:{id:i,unsupported:n}})})),this.options=t}async connect(t){t.chainId&&this.switchChain(t.chainId);const i=await this.getSigner();return await i.getAddress()}async disconnect(){(0,s.a)(this,l,void 0),(0,s.a)(this,u,void 0)}async getAddress(){const t=await this.getSigner();if(!t)throw new Error("No signer found");return await t.getAddress()}async isConnected(){try{return!!await this.getAddress()}catch{return!1}}async getProvider(){return(0,s.b)(this,l)||(0,s.a)(this,l,(0,c.a_)(this.options.chain,{clientId:this.options.clientId,secretKey:this.options.secretKey})),(0,s.b)(this,l)}async getSigner(){if(!(0,s.b)(this,u)){const t=await this.getProvider();(0,s.a)(this,u,w(this.options.ethersWallet,t))}return(0,s.b)(this,u)}async switchChain(t){const i=this.options.chains.find((i=>i.chainId===t));if(!i)throw new Error("Chain not found for chainId ".concat(t,", please add it to the chains property when creating this wallet"));(0,s.a)(this,l,(0,c.a_)(i,{clientId:this.options.clientId,secretKey:this.options.secretKey})),(0,s.a)(this,u,w(this.options.ethersWallet,(0,s.b)(this,l))),this.onChainChanged(t)}async setupListeners(){}updateChains(t){this.options.chains=t}}function w(t,i){let n=t;return i&&(n=t.connect(i)),new g(n)}}}]);
//# sourceMappingURL=6561.9594a7be.chunk.js.map