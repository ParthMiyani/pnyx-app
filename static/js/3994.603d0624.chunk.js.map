{"version":3,"file":"static/js/3994.603d0624.chunk.js","mappings":"iNAcIA,G,SAAoD,IAAIC,SAC5D,MAAMC,UAA0BC,EAAAA,kBAC9BC,WAAAA,CAAYC,GACV,MAMMC,EAAU,IANO,CACrBC,KAAM,WACNC,gBAAgB,EAChBC,4BAA4B,EAC5BC,YAAaC,EAAAA,MAIVN,EAAIC,SAETM,MAAM,CACJC,OAAQR,EAAIQ,OACZP,UACAQ,iBAAkBT,EAAIS,oBAExBC,EAAAA,EAAAA,GAAgBC,KAAM,KAAMC,EAAAA,EAAUC,WACtCC,EAAAA,EAAAA,GAA2BH,KAAMhB,EAAsC,CACrEoB,UAAU,EACVC,WAAO,KAETC,EAAAA,EAAAA,GAAsBN,KAAMhB,EAAsCM,EAAQiB,oCAC5E,CAKA,aAAMC,GACJ,IAAIlB,EAAUmB,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,CAAC,EACnF,IAAI,IAAAG,EAAAC,EACF,MAAMC,QAAiBd,KAAKN,cAC5B,IAAKoB,EACH,MAAM,IAAIC,EAAAA,EAEZf,KAAKgB,iBAGLhB,KAAKiB,KAAK,UAAW,CACnBC,KAAM,eAKR,IAAIC,EAAU,KACd,IAAIC,EAAAA,EAAAA,GAAsBpB,KAAMhB,IAAqD,QAAhB4B,EAAIZ,KAAKV,eAAO,IAAAsB,GAAZA,EAAcpB,iBAAmB6B,QAAQrB,KAAKF,iBAAiBwB,QAAQtB,KAAKuB,oBAAqB,CACxKJ,QAAgBnB,KAAKwB,aAAaC,OAAM,IAAM,OAE9C,KADsBN,EAGpB,UACQL,EAASY,QAAQ,CACrBC,OAAQ,4BACRC,OAAQ,CAAC,CACPC,aAAc,CAAC,KAGrB,CAAE,MAAOC,GAGP,GAAI9B,KAAK+B,2BAA2BD,GAClC,MAAM,IAAIE,EAAAA,EAAyBF,EAEvC,CAEJ,CAGA,IAAKX,EAAS,CACZ,MAAMc,QAAiBnB,EAASY,QAAQ,CACtCC,OAAQ,wBAEVR,EAAUe,EAAAA,WAAiBD,EAAS,GACtC,CAGA,IAAIE,QAAyBnC,KAAKoC,aAE9BC,EAAgBrC,KAAKsC,mBAAmBH,GAG5C,GAAI7C,EAAQiD,SAAWJ,IAAqB7C,EAAQiD,QAClD,UACQvC,KAAKwC,YAAYlD,EAAQiD,SAE/BJ,EAAmB7C,EAAQiD,QAC3BF,EAAgBrC,KAAKsC,mBAAmBhD,EAAQiD,QAClD,CAAE,MAAOE,GACPC,QAAQZ,MAAM,kCAADa,OAAmCrD,EAAQiD,SAAWE,EACrE,CAIc,QAAhB5B,EAAIb,KAAKV,eAAO,IAAAuB,GAAZA,EAAcrB,sBAEVQ,KAAKF,iBAAiB8C,QAAQ5C,KAAKuB,kBAAmB,QAE9D,MAAMsB,EAAiB,CACrBC,MAAO,CACLC,GAAIZ,EACJa,YAAaX,GAEfvB,SAAUA,EACVK,WAGF,OADAnB,KAAKiB,KAAK,UAAW4B,GACdA,CACT,CAAE,MAAOf,GACP,GAAI9B,KAAK+B,2BAA2BD,GAClC,MAAM,IAAIE,EAAAA,EAAyBF,GAErC,IAAoB,QAAhBA,EAAMmB,KACR,MAAM,IAAIC,EAAAA,EAAyBpB,GAErC,MAAMA,CACR,CACF,CACA,mBAAMqB,GACJ,MAAMrC,QAAiBd,KAAKN,oBACtBoB,EAASY,QAAQ,CACrBC,OAAQ,4BACRC,OAAQ,CAAC,CACPC,aAAc,CAAC,KAGrB,E","sources":["../node_modules/@thirdweb-dev/wallets/evm/connectors/metamask/dist/thirdweb-dev-wallets-evm-connectors-metamask.browser.esm.js"],"sourcesContent":["import { _ as _classPrivateFieldInitSpec, a as _classPrivateFieldSet, b as _classPrivateFieldGet } from '../../../../dist/classPrivateFieldSet-a5db7c83.browser.esm.js';\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-d7c057bf.browser.esm.js';\nimport { a as ConnectorNotFoundError, U as UserRejectedRequestError, R as ResourceUnavailableError } from '../../../../dist/errors-9f6736cb.browser.esm.js';\nimport { w as walletIds } from '../../../../dist/walletIds-8e17ffe6.browser.esm.js';\nimport { InjectedConnector } from '../../injected/dist/thirdweb-dev-wallets-evm-connectors-injected.browser.esm.js';\nimport { utils } from 'ethers';\nimport { g as getInjectedMetamaskProvider } from '../../../../dist/getInjectedMetamaskProvider-15002a29.browser.esm.js';\nimport '../../../../dist/WagmiConnector-2f14002d.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\nimport '../../../../dist/assertWindowEthereum-88295886.browser.esm.js';\nimport '../../../../dist/url-a45219bd.browser.esm.js';\nimport '../../../../dist/normalizeChainId-1fb9aedf.browser.esm.js';\n\nvar _UNSTABLE_shimOnConnectSelectAccount = /*#__PURE__*/new WeakMap();\nclass MetaMaskConnector extends InjectedConnector {\n  constructor(arg) {\n    const defaultOptions = {\n      name: \"MetaMask\",\n      shimDisconnect: true,\n      shimChainChangedDisconnect: true,\n      getProvider: getInjectedMetamaskProvider\n    };\n    const options = {\n      ...defaultOptions,\n      ...arg.options\n    };\n    super({\n      chains: arg.chains,\n      options,\n      connectorStorage: arg.connectorStorage\n    });\n    _defineProperty(this, \"id\", walletIds.metamask);\n    _classPrivateFieldInitSpec(this, _UNSTABLE_shimOnConnectSelectAccount, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _UNSTABLE_shimOnConnectSelectAccount, options.UNSTABLE_shimOnConnectSelectAccount);\n  }\n\n  /**\n   * Connect to injected MetaMask provider\n   */\n  async connect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    try {\n      const provider = await this.getProvider();\n      if (!provider) {\n        throw new ConnectorNotFoundError();\n      }\n      this.setupListeners();\n\n      // emit \"connecting\" event\n      this.emit(\"message\", {\n        type: \"connecting\"\n      });\n\n      // Attempt to show wallet select prompt with `wallet_requestPermissions` when\n      // `shimDisconnect` is active and account is in disconnected state (flag in storage)\n      let account = null;\n      if (_classPrivateFieldGet(this, _UNSTABLE_shimOnConnectSelectAccount) && this.options?.shimDisconnect && !Boolean(this.connectorStorage.getItem(this.shimDisconnectKey))) {\n        account = await this.getAccount().catch(() => null);\n        const isConnected = !!account;\n        if (isConnected) {\n          // Attempt to show another prompt for selecting wallet if already connected\n          try {\n            await provider.request({\n              method: \"wallet_requestPermissions\",\n              params: [{\n                eth_accounts: {}\n              }]\n            });\n          } catch (error) {\n            // Not all MetaMask injected providers support `wallet_requestPermissions` (e.g. MetaMask iOS).\n            // Only bubble up error if user rejects request\n            if (this.isUserRejectedRequestError(error)) {\n              throw new UserRejectedRequestError(error);\n            }\n          }\n        }\n      }\n\n      // if account is not already set, request accounts and use the first account\n      if (!account) {\n        const accounts = await provider.request({\n          method: \"eth_requestAccounts\"\n        });\n        account = utils.getAddress(accounts[0]);\n      }\n\n      // get currently connected chainId\n      let connectedChainId = await this.getChainId();\n      // check if connected chain is unsupported\n      let isUnsupported = this.isChainUnsupported(connectedChainId);\n\n      // if chainId is given, but does not match the currently connected chainId, switch to the given chainId\n      if (options.chainId && connectedChainId !== options.chainId) {\n        try {\n          await this.switchChain(options.chainId);\n          // recalculate the chainId and isUnsupported\n          connectedChainId = options.chainId;\n          isUnsupported = this.isChainUnsupported(options.chainId);\n        } catch (e) {\n          console.error(`Could not switch to chain id : ${options.chainId}`, e);\n        }\n      }\n\n      // if shimDisconnect is enabled\n      if (this.options?.shimDisconnect) {\n        // add shimDisconnectKey in storage - this signals that connector is \"connected\"\n        await this.connectorStorage.setItem(this.shimDisconnectKey, \"true\");\n      }\n      const connectionInfo = {\n        chain: {\n          id: connectedChainId,\n          unsupported: isUnsupported\n        },\n        provider: provider,\n        account\n      };\n      this.emit(\"connect\", connectionInfo);\n      return connectionInfo;\n    } catch (error) {\n      if (this.isUserRejectedRequestError(error)) {\n        throw new UserRejectedRequestError(error);\n      }\n      if (error.code === -32002) {\n        throw new ResourceUnavailableError(error);\n      }\n      throw error;\n    }\n  }\n  async switchAccount() {\n    const provider = await this.getProvider();\n    await provider.request({\n      method: \"wallet_requestPermissions\",\n      params: [{\n        eth_accounts: {}\n      }]\n    });\n  }\n}\n\nexport { MetaMaskConnector };\n"],"names":["_UNSTABLE_shimOnConnectSelectAccount","WeakMap","MetaMaskConnector","InjectedConnector","constructor","arg","options","name","shimDisconnect","shimChainChangedDisconnect","getProvider","getInjectedMetamaskProvider","super","chains","connectorStorage","_defineProperty","this","walletIds","metamask","_classPrivateFieldInitSpec","writable","value","_classPrivateFieldSet","UNSTABLE_shimOnConnectSelectAccount","connect","arguments","length","undefined","_this$options","_this$options2","provider","ConnectorNotFoundError","setupListeners","emit","type","account","_classPrivateFieldGet","Boolean","getItem","shimDisconnectKey","getAccount","catch","request","method","params","eth_accounts","error","isUserRejectedRequestError","UserRejectedRequestError","accounts","utils","connectedChainId","getChainId","isUnsupported","isChainUnsupported","chainId","switchChain","e","console","concat","setItem","connectionInfo","chain","id","unsupported","code","ResourceUnavailableError","switchAccount"],"sourceRoot":""}